{"posts":[{"reward":{"type":"xlm"},"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"_id":"630cc06043d7308e3e326ff5","sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":12,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/unsplash/wthZq-CZ-Gc/upload/v1661779943032/gImurQuEv.jpeg","autoGeneratedCover":"","brief":"It's been 11 days since I published my first post about UE. I've been busy, alongside my day-to-day work, I'm moving to a new place soon, and have been following the Unreal Engine 5 Blueprint FPS course, where I learn how to control and navigate the ...","content":"<p>It's been 11 days since I published <a target=\"_blank\" href=\"https://chiptus.hashnode.dev/starting-with-unreal-engine\">my first post about UE</a>. I've been busy, alongside my day-to-day work, I'm moving to a new place soon, and have been following the <a target=\"_blank\" href=\"https://www.udemy.com/course/unreal-engine-5-blueprints-fps\">Unreal Engine 5 Blueprint FPS course</a>, where I learn how to control and navigate the UE interface, add objects and control the movement of a character in the game.</p>\n<p>Initially, I wanted to publish short blog posts about my path in learning game dev, but it felt a much better use of my time to just build and follow the tutorial. So every day I delayed writing the post to tomorrow.\nUE works well for me, but it's running in a low display quality so I miss stuff that I see in the course videos. I've been looking into buying a new machine and into the azure solution. When I finish the course I think I'll start working with Azure.</p>\n<p>So let's go over what I did in the course. It started with some introductions and the setup of UE. A bit about the user interface. Everything <a target=\"_blank\" href=\"https://www.udemy.com/user/stephen-ulibarri-3/\">Stephen, the instructor</a>, does, he does it slowly, so it's very easy to follow. I already had a bit of experience doing some of the stuff, but I started with some patience because I knew very fast I'll start missing stuff.</p>\n<p>We downloaded a few asset packages from the UE marketplace, made some changes to the provided level, and added a few objects. We made the level smaller by adding a few obstacles (while Stephen show us how to duplicate and move objects) and changing the lighting to make the level appear at night.</p>\n<p>The next section was about the character. We've created a blueprint for it, with a mesh (how it looks), a camera, and an event graph. The event graph is really interesting. Instead of writing code, we use visual programming to do that. Adding nodes, and connecting them with arrows.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1661779670381/NYnAilFLG.png\" alt=\"The event graph\" /></p>\n<p>So added a few events, like \"LookUp\" when the mouse moves up and down, and \"MoveForward\" when W and S are pressed, and we make the character move accordingly.</p>\n<p>We learned about action and axis mappings, that map events to a click on the keyboard or move of the mouse.</p>\n<p>We also learned about different data types that UE supports like vector and rotation (which is a 3-dimensional vector of yaw, pitch, and roll).</p>\n<p>We added the ability to jump and learned about the Character movement component, which has many properties to control the movement, like acceleration, gravity, and friction. Then we added animations to walking, so the character doesn't look frozen.</p>\n<p>The last part was using a weapon. Connecting a weapon to a socket on the hand, and moving it. Shooting bullets and adding the correct animation so it looks like we shot one bullet when there's a sound of one bullet shot. We added the ability to aim, and change between animations of moving while aiming and while not aiming.</p>\n<p>We learned about the line trace, to decide where the gunshot has hit. Also adding things like custom functions to our blueprints and returning values from those functions.</p>\n<p>Following, The course will go over adding computer-controlled moving objects (or enemies), fighting them, and different game states.</p>\n<p><a target=\"_blank\" href=\"https://streamable.com/wc2m4y\">What I did so far</a></p>\n","contentMarkdown":"It's been 11 days since I published [my first post about UE](https://chiptus.hashnode.dev/starting-with-unreal-engine). I've been busy, alongside my day-to-day work, I'm moving to a new place soon, and have been following the [Unreal Engine 5 Blueprint FPS course](https://www.udemy.com/course/unreal-engine-5-blueprints-fps), where I learn how to control and navigate the UE interface, add objects and control the movement of a character in the game.\n\nInitially, I wanted to publish short blog posts about my path in learning game dev, but it felt a much better use of my time to just build and follow the tutorial. So every day I delayed writing the post to tomorrow.\nUE works well for me, but it's running in a low display quality so I miss stuff that I see in the course videos. I've been looking into buying a new machine and into the azure solution. When I finish the course I think I'll start working with Azure.\n\nSo let's go over what I did in the course. It started with some introductions and the setup of UE. A bit about the user interface. Everything [Stephen, the instructor](https://www.udemy.com/user/stephen-ulibarri-3/), does, he does it slowly, so it's very easy to follow. I already had a bit of experience doing some of the stuff, but I started with some patience because I knew very fast I'll start missing stuff.\n\nWe downloaded a few asset packages from the UE marketplace, made some changes to the provided level, and added a few objects. We made the level smaller by adding a few obstacles (while Stephen show us how to duplicate and move objects) and changing the lighting to make the level appear at night.\n\nThe next section was about the character. We've created a blueprint for it, with a mesh (how it looks), a camera, and an event graph. The event graph is really interesting. Instead of writing code, we use visual programming to do that. Adding nodes, and connecting them with arrows.\n\n![The event graph](https://cdn.hashnode.com/res/hashnode/image/upload/v1661779670381/NYnAilFLG.png align=\"left\")\n\nSo added a few events, like \"LookUp\" when the mouse moves up and down, and \"MoveForward\" when W and S are pressed, and we make the character move accordingly.\n\nWe learned about action and axis mappings, that map events to a click on the keyboard or move of the mouse.\n\nWe also learned about different data types that UE supports like vector and rotation (which is a 3-dimensional vector of yaw, pitch, and roll).\n\nWe added the ability to jump and learned about the Character movement component, which has many properties to control the movement, like acceleration, gravity, and friction. Then we added animations to walking, so the character doesn't look frozen.\n\nThe last part was using a weapon. Connecting a weapon to a socket on the hand, and moving it. Shooting bullets and adding the correct animation so it looks like we shot one bullet when there's a sound of one bullet shot. We added the ability to aim, and change between animations of moving while aiming and while not aiming.\n\nWe learned about the line trace, to decide where the gunshot has hit. Also adding things like custom functions to our blueprints and returning values from those functions.\n\nFollowing, The course will go over adding computer-controlled moving objects (or enemies), fighting them, and different game states.\n\n[What I did so far](https://streamable.com/wc2m4y)","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b953f2","583be7d9f533d193a2e69269","630cc06043d7308e3e326ff6"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5617.0859,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":false,"enableToc":false,"toc":[],"numUniqueUsersWhoReacted":0,"title":"Working my way through Unreal Engine","subtitle":"","pollOptions":[],"type":"story","coverImageAttribution":"https://unsplash.com/@maxime_dore","coverImagePhotographer":"Maxime Dor√©","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"","metaDescription":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"62effcb6dfc2b15565884099","slug":"working-my-way-through-unreal-engine","importedFromMedium":false,"dateAdded":"2022-08-29T13:34:24.463Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl7esy02e07hk1cnv297tf0z2","author":"56b2ebc410979efc2b9a910e","followersCount":1,"draft":"630cbe8243d7308e3e326fa0","readTime":3,"__v":0,"viewsUpdatedOn":1709987433484,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"630cc06043d7308e3e326ff5"},{"reward":{"type":"xlm"},"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"_id":"62fe4130aa9d01fcb62f022b","sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":40,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/unsplash/KYdTKA9l5iU/upload/v1660829848761/ZU546rxsR.jpeg","autoGeneratedCover":"","brief":"Some interesting news. I got a connection with someone working in the game industry, and he offered to join forces with him to develop a game. He already has something very serious running, and I will be joining for free, to gain experience. We've de...","content":"<p>Some interesting news. I got a connection with someone working in the game industry, and he offered to join forces with him to develop a game. He already has something very serious running, and I will be joining for free, to gain experience. We've decided that I'll start with playing with the Unreal game engine and if I see that I like it and I'm comfortable, I'll join them. This is great news for me. This way I'll be able to get the experience needed for game development, I'll be able to show off what I did, and I'll be able to see if I really like it, as I think I will.</p>\n<p>So, starting with Unreal, first I need to download it. I'm usually working with an ubuntu machine, so I tried downloading it, but they offer only build from source. I didn't want to go to that path (for now), so I booted to windows and downloaded it from <a target=\"_blank\" href=\"https://www.unrealengine.com/en-US/download\">this site</a>.</p>\n<p>The hard part about almost anything regarding development is deciding where to start. Find the right tutorial, or buy a course. There are millions of resources online and each has its own benefits.</p>\n<p>I looked into <a target=\"_blank\" href=\"reddit.com/r/unrealengine\">unreal subreddit</a> and into <a target=\"_blank\" href=\"https://reddit.com/r/gamedev/\">game dev subreddit</a> or <a target=\"_blank\" href=\"https://reddit.com/r/GameDevelopment/\">Game development subreddit</a>. I heard about a guy on Youtube called <a target=\"_blank\" href=\"https://www.youtube.com/c/UnrealSensei\">\"unreal sensei\"</a> and started watching his video about <a target=\"_blank\" href=\"https://youtu.be/k-zMkzmduqI\">unreal 5</a>. It's a good overview of the unreal 5 programs, going in-depth about how to navigate the screen and more. I'm now stuck on minute 27 because Unreal keeps crashing, something about the GPU kept crashing and I found <a target=\"_blank\" href=\"https://docs.unrealengine.com/5.0/en-US/how-to-fix-a-gpu-driver-crash-when-using-unreal-engine/\">unreal docs</a> talking about it.</p>\n<p>I also got a suggestion from my friend about 3 Udemy courses:</p>\n<ul>\n<li>https://www.udemy.com/course/unreal-engine-5-blueprints-fps</li>\n<li>https://www.udemy.com/course/unrealblueprint</li>\n<li>https://www.udemy.com/course/unreal-engine-blueprints-the-ultimate-developer-course/</li>\n</ul>\n<p>I think soon I'll need to buy a new computer that is more suitable for this, but for now, I'll need to struggle with what I have. It would be silly to buy a new computer just to realize it's too big and heavy and I have nothing to do with it because I didn't continue with game development. I also started to look into game dev machines in the cloud. In the past, I worked with a cloud machine to develop things that my local machine couldn't handle, and it should be much cheaper than buying a new machine. I found Azure has <a target=\"_blank\" href=\"https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-azure-gaming.azure-gamedev-vm\">something</a> I'll try it out.</p>\n<p>This failed for now, as there are no available instances for the required machines, or I didn't figure it out correctly. and after applying the changes from the link above, my unreal instance still crashes because of the same error.</p>\n<p>After a few more searches, I found this <a target=\"_blank\" href=\"https://www.youtube.com/watch?v=Vejhv9QmNGM\">video</a> that showed me how to use lower-quality settings. Some graphics won't show, but at least it works. After 1 month of working this way, I can work my way to having a working VM, and after a few months of savings, I can buy a new computer.</p>\n<p>The changes I did were:</p>\n<ol>\n<li>Adding the keys <code>TdrDelay</code> and <code>TdrDdiDelay</code> to <code>Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\GraphicsDrivers</code> with decimal value of 60 - Still Crashing.</li>\n<li>Updating their value to 120 - still crashing.</li>\n<li>Going to the project root folder, and in <code>Config/DefaultEngine.ini</code> - add <code>r.ReflectionCaptureResolution=128</code> under <code>[/Script/Engine.RendererSettings]</code>. Possible values can be 256, 512, or 1024. I took this low value to make sure it works. I can always test if changing it will work.</li>\n<li>In UE, under settings, I opened \"Engine Scalability Settings\" and chose \"Low\" for everything.</li>\n</ol>\n<p>Both 3 and 4 work for now. I'll need to see how we progress from here.</p>\n<p>Oh, another thing. every time I start UE it warns me about the version of the graphics driver. At first, I upgraded the driver, but then I saw they actually want me to downgrade. I'm now waiting for the driver to download it and see if it helps.</p>\n","contentMarkdown":"Some interesting news. I got a connection with someone working in the game industry, and he offered to join forces with him to develop a game. He already has something very serious running, and I will be joining for free, to gain experience. We've decided that I'll start with playing with the Unreal game engine and if I see that I like it and I'm comfortable, I'll join them. This is great news for me. This way I'll be able to get the experience needed for game development, I'll be able to show off what I did, and I'll be able to see if I really like it, as I think I will.\n\nSo, starting with Unreal, first I need to download it. I'm usually working with an ubuntu machine, so I tried downloading it, but they offer only build from source. I didn't want to go to that path (for now), so I booted to windows and downloaded it from [this site](https://www.unrealengine.com/en-US/download).\n\nThe hard part about almost anything regarding development is deciding where to start. Find the right tutorial, or buy a course. There are millions of resources online and each has its own benefits.\n\nI looked into [unreal subreddit](reddit.com/r/unrealengine) and into [game dev subreddit](https://reddit.com/r/gamedev/) or [Game development subreddit](https://reddit.com/r/GameDevelopment/). I heard about a guy on Youtube called [\"unreal sensei\"](https://www.youtube.com/c/UnrealSensei) and started watching his video about [unreal 5](https://youtu.be/k-zMkzmduqI). It's a good overview of the unreal 5 programs, going in-depth about how to navigate the screen and more. I'm now stuck on minute 27 because Unreal keeps crashing, something about the GPU kept crashing and I found [unreal docs](https://docs.unrealengine.com/5.0/en-US/how-to-fix-a-gpu-driver-crash-when-using-unreal-engine/) talking about it.\n\nI also got a suggestion from my friend about 3 Udemy courses:\n- https://www.udemy.com/course/unreal-engine-5-blueprints-fps\n- https://www.udemy.com/course/unrealblueprint\n- https://www.udemy.com/course/unreal-engine-blueprints-the-ultimate-developer-course/\n\nI think soon I'll need to buy a new computer that is more suitable for this, but for now, I'll need to struggle with what I have. It would be silly to buy a new computer just to realize it's too big and heavy and I have nothing to do with it because I didn't continue with game development. I also started to look into game dev machines in the cloud. In the past, I worked with a cloud machine to develop things that my local machine couldn't handle, and it should be much cheaper than buying a new machine. I found Azure has [something](https://azuremarketplace.microsoft.com/en-us/marketplace/apps/microsoft-azure-gaming.azure-gamedev-vm) I'll try it out.\n\n\nThis failed for now, as there are no available instances for the required machines, or I didn't figure it out correctly. and after applying the changes from the link above, my unreal instance still crashes because of the same error.\n\nAfter a few more searches, I found this [video](https://www.youtube.com/watch?v=Vejhv9QmNGM) that showed me how to use lower-quality settings. Some graphics won't show, but at least it works. After 1 month of working this way, I can work my way to having a working VM, and after a few months of savings, I can buy a new computer.\n\nThe changes I did were:\n1. Adding the keys `TdrDelay` and `TdrDdiDelay` to `Computer\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\GraphicsDrivers` with decimal value of 60 - Still Crashing.\n2. Updating their value to 120 - still crashing.\n3. Going to the project root folder, and in `Config/DefaultEngine.ini` - add `r.ReflectionCaptureResolution=128` under `[/Script/Engine.RendererSettings]`. Possible values can be 256, 512, or 1024. I took this low value to make sure it works. I can always test if changing it will work.\n4. In UE, under settings, I opened \"Engine Scalability Settings\" and chose \"Low\" for everything.\n\nBoth 3 and 4 work for now. I'll need to see how we progress from here.\n\nOh, another thing. every time I start UE it warns me about the version of the graphics driver. At first, I upgraded the driver, but then I saw they actually want me to downgrade. I'm now waiting for the driver to download it and see if it helps.\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b953f2","583be7d9f533d193a2e69269"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5595.9733,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":false,"enableToc":false,"toc":[],"numUniqueUsersWhoReacted":0,"title":"Starting with Unreal Engine","subtitle":"","pollOptions":[],"type":"story","coverImageAttribution":"https://unsplash.com/@dewang","coverImagePhotographer":"Dewang Gupta","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"","metaDescription":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"62effcb6dfc2b15565884099","slug":"starting-with-unreal-engine","importedFromMedium":false,"dateAdded":"2022-08-18T13:40:00.943Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl6z3aud800fmahnvamitae06","author":"56b2ebc410979efc2b9a910e","followersCount":1,"draft":"62fe4072f1a220fcdbb643a0","readTime":3,"__v":0,"viewsUpdatedOn":1712102442012,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"62fe4130aa9d01fcb62f022b"},{"reward":{"type":"xlm"},"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"_id":"62fb8c241ebeafdc3d329811","sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":102,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/unsplash/fIMqGvVaATk/upload/v1660590794939/BJLg2uNIY_.jpeg","autoGeneratedCover":"","brief":"My first task was creating a clone of Pong, Pong is one of the earliest arcade games ever created, it's based on a game of ping pong, where you have two paddles and a ball and need to prevent the ball from crossing your paddle. It can be played with ...","content":"<p>My first task was creating a clone of <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Pong\">Pong</a>, Pong is one of the earliest arcade games ever created, it's based on a game of ping pong, where you have two paddles and a ball and need to prevent the ball from crossing your paddle. It can be played with 2 players, each controlling his own paddle, or with one player and the computer controlling the other.</p>\n<p>I see it as some form of a \"hello world\" example for game development. It has a few simple game objects (2 paddles and a ball), the ball should bounce off the paddles, and if a ball touches the screen behind a paddle the game is finished.</p>\n<p>It can also be extended, to add the concept of a score, and play towards a score. you can add sounds to it, and another main screen to choose how many players are playing. Further, we can add support for multiplayer, playing online for high scores, and mobile gaming.</p>\n<h2 id=\"heading-how-to-start\">How to start?</h2>\n<p>Every development project should start not with writing code (although I did and still do it many times), but with writing some text. Objectives, minimal objectives, and nice to have extensions, write some plan, which objects I am going to have, how they interact, and write a list of tasks.</p>\n<h2 id=\"heading-plan\">Plan</h2>\n<h3 id=\"heading-game-objects\">Game objects:</h3>\n<ul>\n<li>Ball</li>\n<li>Paddle</li>\n<li>Score</li>\n</ul>\n<h3 id=\"heading-game-rules\">Game rules:</h3>\n<ul>\n<li>Player 1 controls the left paddle</li>\n<li>Player 2 controls the right paddle</li>\n<li>The ball bounces off the walls</li>\n<li>The ball bounces off the paddles</li>\n<li>The ball is lost if it goes off the top or bottom of the screen</li>\n</ul>\n<h3 id=\"heading-screens\">Screens:</h3>\n<ul>\n<li>Main menu<ul>\n<li>Choose the number of players</li>\n<li>Play</li>\n</ul>\n</li>\n<li>Game screen</li>\n<li>Game over screen</li>\n<li>High score screen</li>\n</ul>\n<h3 id=\"heading-mvp-tasks\">MVP Tasks</h3>\n<ul>\n<li>Create a game object for the ball</li>\n<li>Create a game object for the paddles</li>\n<li>Create a game object for the score</li>\n<li>Game screen<ul>\n<li>Draw the ball</li>\n<li>Draw the paddles</li>\n<li>Draw the score</li>\n<li>2 Players:<ul>\n<li>Player 1 controls the left paddle (W and S)</li>\n<li>Player 2 controls the right paddle (Up and Down)</li>\n</ul>\n</li>\n<li>Ball starts in the middle of the screen and goes to the direction of the paddle that hit it last (or to player 1 if none)</li>\n<li>The ball bounces off the walls</li>\n<li>The ball bounces off the paddles</li>\n<li>The ball is lost if it goes off the left or right of the screen</li>\n<li>The game is won if a player reaches 10 points</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"heading-possible-extensions\">Possible Extensions</h3>\n<ul>\n<li>More screens</li>\n<li>1 player game</li>\n<li>mobile game</li>\n</ul>\n<p>MVP stands for \"Minimum Viable Product\", it's the minimum requirement I need to release. I've got to say thanks to <a target=\"_blank\" href=\"https://github.com/features/copilot\">Github Co-pilot</a> which added some requirements and tasks I didn't think about. I'm having a hard time writing documents, and it's nice that tools like that help with it. I don't use CoPilot to write this blog :)</p>\n<h2 id=\"heading-part-1-creating-a-structure-for-the-game\">Part 1 - Creating a structure for the game.</h2>\n<p>one of my problems with the phaser tutorial is that the code is written in bare HTML, inside a script tag. For a first tutorial, it's great, because it shows the bare minimum of what I need to create a game, but if we want the code to be small and easy to reason about, we should use a bundler, like webpack or vite, and maybe a type system like TypeScript. So I went looking for a project structure to start from, one using vite and typescript. Why vite? because I never used it and I wanted to try it.</p>\n<p>I found https://github.com/ubershmekel/vite-phaser-ts-starter which looks pretty good and basic to start from. its only dependencies were typescript, vite, and phaser, and it had an index.html, main.ts, menu-scene.ts, and style.css. So I took it. I forked the repository into https://github.com/chiptus/phaser-pong and pulled it to my local computer.</p>\n<p>Usually, my first thing would be to clean the things I don't need, but as it's my first project, I wasn't sure what was not needed so I just went with it. I did upgrade phaser to its last beta version and added the list I made under Plan.</p>\n<h2 id=\"heading-part-2-drawing-the-initial-screen\">Part 2 - Drawing the initial screen</h2>\n<p>I also needed two assets, the paddles and a ball. I went with the simplest things, opened Pinta and drew a circle and a line, and saved it as a png.</p>\n<p>Then I went into vscode and started writing the code to draw the initial screen.</p>\n<p>The project structure I used had an index.html, which is the starting point of this project, and this is how vite knows what to compile. It includes a few buttons to make the screen full screen, mute the game and reload the page. It also includes <code>&lt;div id=\"app\" /&gt;</code> element that is where Phaser will inject the game, and a script tag that points to <code>/src/main.ts</code>. vite knows how to process this tag.</p>\n<p><code>main.ts</code> is the main script file. It initiates the Game and configures it. It also imports the list of scenes we have in this game, here we have only one scene <code>MenuScene</code>. <code>MenuScene</code> creates a simple \"game\" which has a random number of particles falling from the sky, and pressing \"S\" restarts it with a gasping sound.</p>\n<p>I deleted the menu scene and created a new <code>game-scene</code> file that contains a <code>GameScene</code> class that extends <code>Phaser.Scene</code> the base Scene class for Phaser. Similar to the phaser tutorial, we can implement <code>preload</code>, <code>create</code> and <code>update</code> functions to run the game</p>\n<p>My first objective is to draw the scene, so let's import the ball and paddle images:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-comment\">// at the top</span>\n<span class=\"hljs-keyword\">import</span> ballUrl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../assets/ball.png\"</span>;\n<span class=\"hljs-keyword\">import</span> paddleUrl <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../assets/paddle.png\"</span>;\n\n<span class=\"hljs-comment\">// inside the class definition</span>\npreload(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"ball\"</span>, ballUrl);\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"paddle\"</span>, paddleUrl);\n}\n</code></pre>\n<p>the import statements are importing the images as URL, and in <code>preload</code> we can use that URL to load the image.</p>\n<p>in <code>create</code> we actually draw the scene:</p>\n<pre><code class=\"lang-ts\">create(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-comment\">// draw the ball</span>\n    <span class=\"hljs-built_in\">this</span>.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"ball\"</span>);\n\n    <span class=\"hljs-comment\">// draw left player</span>\n    <span class=\"hljs-keyword\">const</span> playerL = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"paddle\"</span>);\n    playerL.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n\n    <span class=\"hljs-comment\">// draw right player</span>\n    <span class=\"hljs-keyword\">const</span> playerR = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">750</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"paddle\"</span>);\n    playerR.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n}\n</code></pre>\n<p>now we should see something like this:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660590193505/uiU6zolzM.png\" alt=\"Initial Screen\" /></p>\n<p>you might see your game screen expands. I still need to work it out, but removing the lines</p>\n<pre><code class=\"lang-ts\">    mode: Phaser.Scale.FIT,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n</code></pre>\n<p>from <code>main.ts</code> fixed it.</p>\n<h2 id=\"heading-part-3-controlling-the-paddles\">Part 3 - Controlling the paddles</h2>\n<p>In this part, we want to be able to control the paddles using our keyboard. Looking to our requirements, the right player should be able to use \"Up\" and \"Down\" cursors to control his paddle while the left player should be able to use the \"W\" and \"S\" keys.</p>\n<p>We need a way to catch clicking on those different keyboard keys and move the paddles accordingly. This is usually done in the <code>update</code> method of the scene. Since it's a class, we don't want to use global variables for the players and keys like we did one the phaser tutorial, but we will bind them to the class.</p>\n<p>So we need to add the right fields to our scene class:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> GameScene <span class=\"hljs-keyword\">extends</span> Phaser.Scene {\n  playerL?: Phaser.Types.Physics.Arcade.ImageWithDynamicBody;\n  playerR?: Phaser.Types.Physics.Arcade.ImageWithDynamicBody;\n\n  cursors?: {\n    keyW: Phaser.Input.Keyboard.Key;\n    keyS: Phaser.Input.Keyboard.Key;\n    keyUp: Phaser.Input.Keyboard.Key;\n    keyDown: Phaser.Input.Keyboard.Key;\n  };\n\n...\n</code></pre>\n<p>How did I know the right types? by checking the return value for <code>this.physics.add.image</code> and for the keys, by checking the functions we will use soon.</p>\n<p>the create function will be modified to the following:</p>\n<pre><code class=\"lang-ts\">create(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-comment\">// draw the ball</span>\n    <span class=\"hljs-built_in\">this</span>.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"ball\"</span>);\n\n    <span class=\"hljs-comment\">// draw left player</span>\n    <span class=\"hljs-built_in\">this</span>.playerL = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"paddle\"</span>);\n    <span class=\"hljs-built_in\">this</span>.playerL.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n\n    <span class=\"hljs-comment\">// draw right player</span>\n    <span class=\"hljs-built_in\">this</span>.playerR = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">750</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"paddle\"</span>);\n    <span class=\"hljs-built_in\">this</span>.playerR.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n\n    <span class=\"hljs-keyword\">const</span> keyW = <span class=\"hljs-built_in\">this</span>.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n    <span class=\"hljs-keyword\">const</span> keyS = <span class=\"hljs-built_in\">this</span>.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n    <span class=\"hljs-keyword\">const</span> keyUp = <span class=\"hljs-built_in\">this</span>.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.UP);\n    <span class=\"hljs-keyword\">const</span> keyDown = <span class=\"hljs-built_in\">this</span>.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.DOWN\n    );\n\n    <span class=\"hljs-built_in\">this</span>.cursors = {\n      keyW,\n      keyS,\n      keyUp,\n      keyDown,\n    };\n}\n</code></pre>\n<p>instead of just drawing the players we save the return value of <code>.add.image</code> to <code>this.playerX</code> and we're adding a pointer to the relevant keyboard keys.</p>\n<p>handling key press and changing the player velocity is done in <code>update</code>:</p>\n<pre><code class=\"lang-ts\">update(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-comment\">// make sure all relevant properties are defined</span>\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.playerL || !<span class=\"hljs-built_in\">this</span>.playerR || !<span class=\"hljs-built_in\">this</span>.cursors) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// handle left player movement</span>\n    <span class=\"hljs-built_in\">this</span>.playerL.setVelocity(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursors.keyW.isDown) {\n      <span class=\"hljs-built_in\">this</span>.playerL.setVelocityY(<span class=\"hljs-number\">-300</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursors.keyS.isDown) {\n      <span class=\"hljs-built_in\">this</span>.playerL.setVelocityY(<span class=\"hljs-number\">300</span>);\n    }\n\n    <span class=\"hljs-comment\">// handle right player movement</span>\n    <span class=\"hljs-built_in\">this</span>.playerR.setVelocity(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursors.keyUp.isDown) {\n      <span class=\"hljs-built_in\">this</span>.playerR.setVelocityY(<span class=\"hljs-number\">-300</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.cursors.keyDown.isDown) {\n      <span class=\"hljs-built_in\">this</span>.playerR.setVelocityY(<span class=\"hljs-number\">300</span>);\n    }\n}\n</code></pre>\n<p>The first line is what typescripts calls <a target=\"_blank\" href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html\">Type Narrowing</a>. Although we know (from create) that all the class properties should be defined, TypeScript doesn't have a way to know that <code>create</code> is always called before <code>update</code>, so <code>this.playerL</code> can be undefined. So we add a check for falsy values, and after the first <code>if</code> statement, we know that <code>playerL</code> and the other properties are defined.</p>\n<p>The handling of both player's movements is almost the same, the only difference is the keys we use:</p>\n<ol>\n<li>set speed to 0 - this makes sure that if any key is not clicked, the paddle won't move.</li>\n<li>if up key (w for playerL) - set speed to negative 300, so the paddle will go up.</li>\n<li>if down key (s for playerL) - move down</li>\n</ol>\n<p>It should work like this:\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660590232719/_X7J3ruPp.gif\" alt=\"moving paddles\" /></p>\n<h2 id=\"heading-part-3-bouncing-ball\">Part 3 - Bouncing ball</h2>\n<p>Like we did for the players, let's add a ball property for the ball game object and save the game object to it:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">class</span> GameScene {\n  ball?: Phaser.Types.Physics.Arcade.ImageWithDynamicBody;\n\n  create(): <span class=\"hljs-built_in\">void</span> {\n    <span class=\"hljs-built_in\">this</span>.ball = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"ball\"</span>);\n  }\n}\n</code></pre>\n<p>the ball is required to:</p>\n<ul>\n<li>move</li>\n</ul>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.ball.setVelocity(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>);\n</code></pre>\n<ul>\n<li>collide with the world bounds</li>\n</ul>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.ball.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n</code></pre>\n<ul>\n<li>collide with the paddles</li>\n</ul>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.physics.add.collider(<span class=\"hljs-built_in\">this</span>.playerL, <span class=\"hljs-built_in\">this</span>.ball);\n<span class=\"hljs-built_in\">this</span>.physics.add.collider(<span class=\"hljs-built_in\">this</span>.playerR, <span class=\"hljs-built_in\">this</span>.ball);\n</code></pre>\n<ul>\n<li>bounce off of them</li>\n</ul>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.ball.setBounce(<span class=\"hljs-number\">1</span>);\n</code></pre>\n<ul>\n<li>stop the game if colliding with the left or right world bounds.</li>\n</ul>\n<p>We will do this soon, let's see how it goes until now:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.ball = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"ball\"</span>);\n<span class=\"hljs-built_in\">this</span>.ball.setVelocity(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>);\n<span class=\"hljs-built_in\">this</span>.ball.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-built_in\">this</span>.physics.add.collider(<span class=\"hljs-built_in\">this</span>.playerL, <span class=\"hljs-built_in\">this</span>.ball);\n<span class=\"hljs-built_in\">this</span>.physics.add.collider(<span class=\"hljs-built_in\">this</span>.playerR, <span class=\"hljs-built_in\">this</span>.ball);\n<span class=\"hljs-built_in\">this</span>.ball.setBounce(<span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>For some reason, if you look at your game, the ball bounces nicely when touching the world bounds, but touching the paddles this happens:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660590293992/LhbIH0CYR.gif\" alt=\"wrong ball paddle bounce\" /></p>\n<p>This took me a long time to solve. Looking into the tutorial didn't help as it uses almost exactly the same code. I don't remember how I found it out, but the realization that in contrast to the tutorial where the platforms were static objects, here, the paddles are dynamic, and we can't make them static, because they should move. So I have found the property of a dynamic object called <code>pushable</code> . from the <a target=\"_blank\" href=\"https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Components.Pushable.html\">docs</a>:</p>\n<blockquote>\n<p>A body that cannot be pushed will reflect back all the velocity given to the colliding body. If that body is also not pushable, then the separation will be split between them evenly.</p>\n</blockquote>\n<p>The following solves the issue:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.playerL.setPushable(<span class=\"hljs-literal\">false</span>);\n<span class=\"hljs-built_in\">this</span>.playerR.setPushable(<span class=\"hljs-literal\">false</span>);\n</code></pre>\n<p>The last thing we need is to stop the ball when it reaches the left/right world bounds. A world object <code>this.physics.world</code> has an event called <code>worldbounds</code> (or the constant <code>Phaser.Physics.Arcade.Events.WORLD_BOUNDS</code> - better to use), but it's only called for game objects that have the property <code>gameObject.body.onWorldBounds = true</code>. I guess it's to reduce memory usage. so we need to run the following code:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.ball.body.onWorldBounds = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-built_in\">this</span>.physics.world.on(\n  Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">\n    body: Phaser.Physics.Arcade.Body,\n    up: <span class=\"hljs-built_in\">boolean</span>,\n    down: <span class=\"hljs-built_in\">boolean</span>,\n    left: <span class=\"hljs-built_in\">boolean</span>,\n    right: <span class=\"hljs-built_in\">boolean</span>\n  </span>) =&gt;</span> {\n    <span class=\"hljs-comment\">// to filter events on other objects</span>\n    <span class=\"hljs-keyword\">if</span> (body.gameObject !== <span class=\"hljs-built_in\">this</span>.ball) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-comment\">// only stop if it reaches to left or right bounds</span>\n    <span class=\"hljs-keyword\">if</span> (right || left) {\n      <span class=\"hljs-built_in\">this</span>.ball.setVelocity(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n    }\n  }\n);\n</code></pre>\n<h2 id=\"heading-part-4-a-little-refactor\">Part 4 - A little refactor</h2>\n<p>As the game scene file becomes bigger, it also becomes more unreadable, so I think it's time to do some refactoring before doing anything else.</p>\n<p>Let's move the player and ball logic into two respective classes:</p>\n<p><em>Player.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Player {\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">options</span>) {}\n  create() {}\n  update() {}\n}\n</code></pre>\n<p><em>Ball.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Ball {\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">options</span>) {}\n  create() {}\n  update() {}\n}\n</code></pre>\n<p>These classes will handle all the logic that is related to their objects and we will use them like this:</p>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> GameScene <span class=\"hljs-keyword\">extends</span> Phaser.Scene {\n    ball: Ball;\n    playerL: Player;\n    playerR: Player;\n\n     <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-built_in\">super</span>({\n          key: <span class=\"hljs-string\">\"GameScene\"</span>,\n        });\n\n        <span class=\"hljs-built_in\">this</span>.playerL = <span class=\"hljs-keyword\">new</span> Player({scene: <span class=\"hljs-built_in\">this</span>});\n        <span class=\"hljs-built_in\">this</span>.playerR = <span class=\"hljs-keyword\">new</span> Player({scene: <span class=\"hljs-built_in\">this</span>});\n        <span class=\"hljs-built_in\">this</span>.ball = <span class=\"hljs-keyword\">new</span> Ball({scene: <span class=\"hljs-built_in\">this</span>})\n    }\n\n    ...\n\n    create() {\n        <span class=\"hljs-built_in\">this</span>.playerL.create()\n        <span class=\"hljs-built_in\">this</span>.playerR.create()\n        <span class=\"hljs-built_in\">this</span>.ball.create()\n    }\n\n    update() {\n        <span class=\"hljs-built_in\">this</span>.playerL.update()\n        <span class=\"hljs-built_in\">this</span>.playerR.update()\n        <span class=\"hljs-built_in\">this</span>.ball.update()\n    }\n}\n</code></pre>\n<p>These are the basics, we will change some of them. like adding collisions between the players and the ball.</p>\n<p>each object needs to be drawn, let's do that first:</p>\n<h3 id=\"heading-draw-the-objects\">Draw the objects</h3>\n<p><em>Player.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">import</span> { Physics, Scene } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phaser\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> Options {\n  scene: Scene;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Player {\n  scene: Scene;\n  gameObject?: Physics.Arcade.Image;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">{ scene }: Options</span>) {\n    <span class=\"hljs-built_in\">this</span>.scene = scene;\n  }\n\n  create() {\n    <span class=\"hljs-comment\">// draw left player</span>\n    <span class=\"hljs-built_in\">this</span>.gameObject = <span class=\"hljs-built_in\">this</span>.scene.physics.add.image(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"paddle\"</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setPushable(<span class=\"hljs-literal\">false</span>);\n  }\n\n  update() {}\n}\n</code></pre>\n<p>this will draw the left player, to draw the right player we need to pass a different X value to <code>add.image</code>. We can use the Options interface for it:</p>\n<p><em>Player.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">import</span> { Physics, Scene } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phaser\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> Options {\n  scene: Scene;\n  startX: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Player {\n  scene: Scene;\n  gameObject?: Physics.Arcade.Image;\n  startX: <span class=\"hljs-built_in\">number</span>;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">{ scene, startX }: Options</span>) {\n    <span class=\"hljs-built_in\">this</span>.scene = scene;\n    <span class=\"hljs-built_in\">this</span>.startX = startX;\n  }\n\n  create() {\n    <span class=\"hljs-comment\">// draw left player</span>\n    <span class=\"hljs-built_in\">this</span>.gameObject = <span class=\"hljs-built_in\">this</span>.scene.physics.add.image(<span class=\"hljs-built_in\">this</span>.startX, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"paddle\"</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setPushable(<span class=\"hljs-literal\">false</span>);\n  }\n\n  update() {}\n}\n</code></pre>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.playerL = <span class=\"hljs-keyword\">new</span> Player({ scene: <span class=\"hljs-built_in\">this</span>, startX: <span class=\"hljs-number\">50</span> });\n<span class=\"hljs-built_in\">this</span>.playerR = <span class=\"hljs-keyword\">new</span> Player({ scene: <span class=\"hljs-built_in\">this</span>, startX: <span class=\"hljs-number\">750</span> });\n</code></pre>\n<p>Now for the ball, it's very similar:</p>\n<p><em>Ball.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">import</span> { Scene } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phaser\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> Options {\n  scene: Scene;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Ball {\n  scene: Scene;\n  gameObject?: Phaser.Physics.Arcade.Image;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">{ scene }: Options</span>) {\n    <span class=\"hljs-built_in\">this</span>.scene = scene;\n  }\n\n  create() {\n    <span class=\"hljs-built_in\">this</span>.gameObject = <span class=\"hljs-built_in\">this</span>.scene.physics.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"ball\"</span>);\n  }\n\n  update() {}\n}\n</code></pre>\n<p>Now we should be able to see the same screen we see at the end of Part 2.</p>\n<h3 id=\"heading-control-the-paddles\">Control the paddles</h3>\n<p>To move the paddles, the game scene needs to tell each player which keys are controlling it:</p>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.playerL = <span class=\"hljs-keyword\">new</span> Player({\n  scene: <span class=\"hljs-built_in\">this</span>,\n  startX: <span class=\"hljs-number\">50</span>,\n  cursors: {\n    keyDown: Phaser.Input.Keyboard.KeyCodes.S,\n    keyUp: Phaser.Input.Keyboard.KeyCodes.W,\n  },\n});\n<span class=\"hljs-built_in\">this</span>.playerR = <span class=\"hljs-keyword\">new</span> Player({\n  scene: <span class=\"hljs-built_in\">this</span>,\n  startX: <span class=\"hljs-number\">750</span>,\n  cursors: {\n    keyDown: Phaser.Input.Keyboard.KeyCodes.DOWN,\n    keyUp: Phaser.Input.Keyboard.KeyCodes.UP,\n  },\n});\n</code></pre>\n<p>and in <code>Player.ts</code> we need to respond to them</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">import</span> { Physics, Scene } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"phaser\"</span>;\n\n<span class=\"hljs-keyword\">interface</span> CursorOptions {\n  keyUp: <span class=\"hljs-built_in\">number</span>;\n  keyDown: <span class=\"hljs-built_in\">number</span>;\n}\n\n<span class=\"hljs-keyword\">interface</span> Options {\n  scene: Scene;\n  startX: <span class=\"hljs-built_in\">number</span>;\n  cursors: CursorOptions;\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Player {\n  scene: Scene;\n  startX: <span class=\"hljs-built_in\">number</span>;\n  cursorOptions: CursorOptions;\n\n  gameObject?: Physics.Arcade.Image;\n  keyUp?: Phaser.Input.Keyboard.Key;\n  keyDown?: Phaser.Input.Keyboard.Key;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">{ scene, startX, cursors }: Options</span>) {\n    <span class=\"hljs-built_in\">this</span>.scene = scene;\n    <span class=\"hljs-built_in\">this</span>.startX = startX;\n    <span class=\"hljs-built_in\">this</span>.cursorOptions = cursors; <span class=\"hljs-comment\">// accept the cursor keys</span>\n  }\n\n  create() {\n    <span class=\"hljs-built_in\">this</span>.gameObject = <span class=\"hljs-built_in\">this</span>.scene.physics.add.image(<span class=\"hljs-built_in\">this</span>.startX, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"paddle\"</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setPushable(<span class=\"hljs-literal\">false</span>);\n\n    <span class=\"hljs-comment\">// bind to these keys</span>\n    <span class=\"hljs-built_in\">this</span>.keyUp = <span class=\"hljs-built_in\">this</span>.scene.input.keyboard.addKey(<span class=\"hljs-built_in\">this</span>.cursorOptions.keyUp);\n    <span class=\"hljs-built_in\">this</span>.keyDown = <span class=\"hljs-built_in\">this</span>.scene.input.keyboard.addKey(<span class=\"hljs-built_in\">this</span>.cursorOptions.keyDown);\n  }\n\n  update() {\n    <span class=\"hljs-comment\">// handle player movement</span>\n    <span class=\"hljs-built_in\">this</span>.gameObject?.setVelocity(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.keyUp?.isDown) {\n      <span class=\"hljs-built_in\">this</span>.gameObject?.setVelocityY(<span class=\"hljs-number\">-300</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.keyDown?.isDown) {\n      <span class=\"hljs-built_in\">this</span>.gameObject?.setVelocityY(<span class=\"hljs-number\">300</span>);\n    }\n  }\n}\n</code></pre>\n<h3 id=\"heading-bounce-the-ball\">Bounce the ball</h3>\n<p>First, we can add the following lines to Ball's create method, so the ball moves and collides with the world bounds:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.gameObject.setVelocity(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>);\n<span class=\"hljs-built_in\">this</span>.gameObject.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-built_in\">this</span>.gameObject.setBounce(<span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>Now, the ball passes through the paddles, and we should add set the ball to collide with them. So the ball should have a reference to them:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">type</span> PlayerTuple = [Player, Player];\n\n<span class=\"hljs-keyword\">interface</span> Options {\n  scene: Scene;\n  players: PlayerTuple\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Ball {\n  scene: Scene;\n  players: PlayerTuple\n\n  gameObject?: Phaser.Physics.Arcade.Image;\n\n  <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\">{ scene, players }: Options</span>) {\n    <span class=\"hljs-built_in\">this</span>.scene = scene;\n    <span class=\"hljs-built_in\">this</span>.players = players\n  }\n\n    ...\n\n}\n</code></pre>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.ball = <span class=\"hljs-keyword\">new</span> Ball({\n  scene: <span class=\"hljs-built_in\">this</span>,\n  players: [<span class=\"hljs-built_in\">this</span>.playerL, <span class=\"hljs-built_in\">this</span>.playerR],\n});\n</code></pre>\n<p>and now I can add a collision with their game object:\n<em>Ball.ts</em></p>\n<pre><code class=\"lang-ts\">create() {\n    ...\n    <span class=\"hljs-built_in\">this</span>.players.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (p.gameObject &amp;&amp; <span class=\"hljs-built_in\">this</span>.gameObject) {\n        <span class=\"hljs-built_in\">this</span>.scene.physics.add.collider(<span class=\"hljs-built_in\">this</span>.gameObject, p.gameObject);\n      }\n    });\n}\n</code></pre>\n<p>it's not the most beautiful piece of code I wrote, but it works.</p>\n<p>and we need to make sure the ball stops when it collides with the right or left bounds:</p>\n<p><em>Ball.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.gameObject.body.onWorldBounds = <span class=\"hljs-literal\">true</span>;\n<span class=\"hljs-built_in\">this</span>.scene.physics.world.on(\n  Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n  <span class=\"hljs-function\">(<span class=\"hljs-params\">\n    body: Phaser.Physics.Arcade.Body,\n    up: <span class=\"hljs-built_in\">boolean</span>,\n    down: <span class=\"hljs-built_in\">boolean</span>,\n    left: <span class=\"hljs-built_in\">boolean</span>,\n    right: <span class=\"hljs-built_in\">boolean</span>\n  </span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (body.gameObject !== <span class=\"hljs-built_in\">this</span>.gameObject) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">if</span> (right || left) {\n      <span class=\"hljs-built_in\">this</span>.gameObject.setVelocity(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n    }\n  }\n);\n</code></pre>\n<p>Typescript will complain about <code>this.gameObject.body.onWorldBounds</code> being unreadable, so we need to change <code>gameObject</code> type to <code>Phaser.Types.Physics.Arcade.ImageWithDynamicBody</code></p>\n<h2 id=\"heading-part-5-taking-score\">Part 5 - Taking score</h2>\n<p>So now we have the option to play 2 players until the ball reaches the screen bounds. Let's add score to the game. We can have each player hold his score, but since it's a state that the game notices, we will keep it in the Scene object:</p>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-keyword\">class</span> GameScene {\n    score: {\n        left: <span class=\"hljs-built_in\">number</span>;\n        leftText?: Phaser.GameObjects.Text;\n        right: <span class=\"hljs-built_in\">number</span>;\n        rightText?: Phaser.GameObjects.Text;\n    };\n\n\n    <span class=\"hljs-keyword\">constructor</span>(<span class=\"hljs-params\"></span>) {\n        ...\n\n        <span class=\"hljs-built_in\">this</span>.score = {\n          left: <span class=\"hljs-number\">0</span>,\n          right: <span class=\"hljs-number\">0</span>,\n        };\n    }\n\n    create() {\n        <span class=\"hljs-built_in\">this</span>.score.leftText = <span class=\"hljs-built_in\">this</span>.add.text(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">\"Left: 0\"</span>, {\n            fontSize: <span class=\"hljs-string\">\"32px\"</span>,\n            color: <span class=\"hljs-string\">\"#fff\"</span>,\n        });\n\n        <span class=\"hljs-built_in\">this</span>.score.rightText = <span class=\"hljs-built_in\">this</span>.add.text(<span class=\"hljs-number\">800</span> - <span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">16</span>, <span class=\"hljs-string\">\"Right: 0\"</span>, {\n            fontSize: <span class=\"hljs-string\">\"32px\"</span>,\n            color: <span class=\"hljs-string\">\"#fff\"</span>,\n        });\n    }\n}\n</code></pre>\n<p>now to track when we need to change the score, we need to call a function (callback) whenever the ball touches one of the sides. We already have this check in the Ball class:</p>\n<pre><code class=\"lang-ts\">...\n<span class=\"hljs-built_in\">this</span>.scene.physics.world.on(\n      Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">\n        body: Phaser.Physics.Arcade.Body,\n        _up: <span class=\"hljs-built_in\">boolean</span>,\n        _down: <span class=\"hljs-built_in\">boolean</span>,\n        left: <span class=\"hljs-built_in\">boolean</span>,\n        right: <span class=\"hljs-built_in\">boolean</span>\n      </span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (body.gameObject !== <span class=\"hljs-built_in\">this</span>.gameObject) {\n          <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (right || left) {\n          <span class=\"hljs-built_in\">this</span>.gameObject.setVelocity(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);\n        }\n      }\n</code></pre>\n<p>instead of stopping the ball, we will do two things:</p>\n<ol>\n<li>destroy the ball</li>\n<li>call a callback that is provided to the create function</li>\n</ol>\n<pre><code class=\"lang-ts\">create(onCollideWithWorldBound: <span class=\"hljs-function\">(<span class=\"hljs-params\">winner: <span class=\"hljs-string\">\"left\"</span> | <span class=\"hljs-string\">\"right\"</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>) {\n    ...\n    <span class=\"hljs-built_in\">this</span>.scene.physics.world.on(\n      Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">\n        body: Phaser.Physics.Arcade.Body,\n        _up: <span class=\"hljs-built_in\">boolean</span>,\n        _down: <span class=\"hljs-built_in\">boolean</span>,\n        left: <span class=\"hljs-built_in\">boolean</span>,\n        right: <span class=\"hljs-built_in\">boolean</span>\n      </span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (body.gameObject !== <span class=\"hljs-built_in\">this</span>.gameObject) {\n          <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (right || left) {\n            <span class=\"hljs-comment\">// destroy the ball</span>\n          <span class=\"hljs-built_in\">this</span>.gameObject.destroy();\n          <span class=\"hljs-comment\">// call the provided callback</span>\n          onCollideWithWorldBound(left ? <span class=\"hljs-string\">\"right\"</span> : <span class=\"hljs-string\">\"left\"</span>);\n        }\n      }\n}\n</code></pre>\n<p>now in <code>game-scene.ts</code> we will provide this callback that will add a point to the correct player:</p>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\">create() {\n    ...\n    <span class=\"hljs-built_in\">this</span>.ball.create(<span class=\"hljs-function\">(<span class=\"hljs-params\">winner</span>) =&gt;</span> {\n      <span class=\"hljs-built_in\">this</span>.addPoint(winner);\n    });\n}\n\naddPoint(winner: <span class=\"hljs-string\">\"left\"</span> | <span class=\"hljs-string\">\"right\"</span>) {\n    <span class=\"hljs-comment\">// add a point to the winner</span>\n    <span class=\"hljs-built_in\">this</span>.score[winner]++;\n    <span class=\"hljs-comment\">// write that new score on the screen</span>\n    <span class=\"hljs-built_in\">this</span>.score[<span class=\"hljs-string\">`<span class=\"hljs-subst\">${winner}</span>Text`</span>]?.setText(\n      <span class=\"hljs-string\">`<span class=\"hljs-subst\">${capitalize(winner)}</span>: <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.score[winner]}</span>`</span>\n    );\n}\n</code></pre>\n<p>As you see, <code>this.ball.create</code> now calls a callback (from knowing the code on <code>Ball.ts</code> we know it's called when the ball collides with the world bounds). This callback now calls <code>addPoint</code>. and <code>addPoint</code> saves the new score and draws that on the screen.</p>\n<h2 id=\"heading-part-6-count-scores-up-to-10\">Part 6 - Count scores up to 10</h2>\n<p>We want to continue playing until one of the players has a score of 10. Let's first see how to continue playing. We need to recreate the ball. We don't need to recreate the whole <code>Ball</code> object, we just need to call <code>this.ball.create</code> again:</p>\n<pre><code class=\"lang-ts\">create() {\n    <span class=\"hljs-built_in\">this</span>.playerL.create();\n    <span class=\"hljs-built_in\">this</span>.playerR.create();\n    <span class=\"hljs-built_in\">this</span>.ball.create(<span class=\"hljs-function\">(<span class=\"hljs-params\">winner</span>) =&gt;</span> {\n        <span class=\"hljs-built_in\">this</span>.addPoint(winner);\n        <span class=\"hljs-built_in\">this</span>.ball.create();\n    });\n}\n</code></pre>\n<p>This was actually surprising for me, I expected the ball to appear twice, but the callback we gave the first <code>this.ball.create</code> is called again and again, because we added the event on the world object, which we don't destroy. The thing I missed here is what we call <code>closure</code>, and that means that <code>onCollideWithWorldBound</code> will always exist in the context of the event handler we're running on <code>this.scene.physics.world.on</code> (I simplify it, go read about <a target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\">closure</a>)</p>\n<p>So I suggest moving the setting of the callback to a <code>setCallback</code> method on the ball that will be called once in <code>create</code> of <code>GameScene</code>:</p>\n<pre><code class=\"lang-ts\">setCallback(onCollideWithWorldBound: <span class=\"hljs-function\">(<span class=\"hljs-params\">winner: <span class=\"hljs-string\">\"left\"</span> | <span class=\"hljs-string\">\"right\"</span></span>) =&gt;</span> <span class=\"hljs-built_in\">void</span>) {\n    <span class=\"hljs-built_in\">this</span>.scene.physics.world.on(\n      Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">\n        body: Phaser.Physics.Arcade.Body,\n        _up: <span class=\"hljs-built_in\">boolean</span>,\n        _down: <span class=\"hljs-built_in\">boolean</span>,\n        left: <span class=\"hljs-built_in\">boolean</span>,\n        right: <span class=\"hljs-built_in\">boolean</span>\n      </span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">if</span> (body.gameObject !== <span class=\"hljs-built_in\">this</span>.gameObject) {\n          <span class=\"hljs-keyword\">return</span>;\n        }\n\n        <span class=\"hljs-keyword\">if</span> (right || left) {\n          <span class=\"hljs-comment\">// destroy the ball</span>\n          <span class=\"hljs-built_in\">this</span>.gameObject.destroy();\n          <span class=\"hljs-comment\">// call the provided callback</span>\n          onCollideWithWorldBound(left ? <span class=\"hljs-string\">\"right\"</span> : <span class=\"hljs-string\">\"left\"</span>);\n        }\n      }\n    );\n  }\n\n  create() {\n    <span class=\"hljs-built_in\">this</span>.gameObject = <span class=\"hljs-built_in\">this</span>.scene.physics.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"ball\"</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setVelocity(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n    <span class=\"hljs-built_in\">this</span>.gameObject.setBounce(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-built_in\">this</span>.players.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">p</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (p.gameObject &amp;&amp; <span class=\"hljs-built_in\">this</span>.gameObject) {\n        <span class=\"hljs-built_in\">this</span>.scene.physics.add.collider(<span class=\"hljs-built_in\">this</span>.gameObject, p.gameObject);\n      }\n    });\n\n    <span class=\"hljs-built_in\">this</span>.gameObject.body.onWorldBounds = <span class=\"hljs-literal\">true</span>;\n  }\n</code></pre>\n<p>see how we removed the setting of the callback to another method that isn't called on <code>create</code>.</p>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\">create() {\n    <span class=\"hljs-built_in\">this</span>.playerL.create();\n    <span class=\"hljs-built_in\">this</span>.playerR.create();\n\n    <span class=\"hljs-built_in\">this</span>.ball.setCallback(<span class=\"hljs-function\">(<span class=\"hljs-params\">winner</span>) =&gt;</span> {\n      <span class=\"hljs-built_in\">this</span>.addPoint(winner);\n      <span class=\"hljs-built_in\">this</span>.ball.create();\n    });\n\n    <span class=\"hljs-built_in\">this</span>.ball.create();\n  }\n</code></pre>\n<p>Now our game will be played until one of the players gets tired :)</p>\n<p>Let's stop the game when one of the players gets a score of 10:</p>\n<pre><code class=\"lang-ts\"><span class=\"hljs-built_in\">this</span>.ball.setCallback(<span class=\"hljs-function\">(<span class=\"hljs-params\">winner</span>) =&gt;</span> {\n  <span class=\"hljs-built_in\">this</span>.addPoint(winner);\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.score[winner] &lt; <span class=\"hljs-number\">10</span>) {\n    <span class=\"hljs-built_in\">this</span>.ball.create();\n  }\n});\n</code></pre>\n<h2 id=\"heading-part-7-show-the-winner\">Part 7 - show the winner</h2>\n<p>To show the winner, I think ideally it would be to create another scene, but that's a good enhancement we can add later.</p>\n<p><em>game-scene.ts</em></p>\n<pre><code class=\"lang-ts\">...\n\ncreate() {\n\n    <span class=\"hljs-built_in\">this</span>.ball.setCallback(<span class=\"hljs-function\">(<span class=\"hljs-params\">winner</span>) =&gt;</span> {\n      <span class=\"hljs-built_in\">this</span>.addPoint(winner);\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.score[winner] &lt; <span class=\"hljs-number\">10</span>) {\n        <span class=\"hljs-built_in\">this</span>.ball.create();\n      } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-built_in\">this</span>.gameEnded();\n      }\n    });\n\n    <span class=\"hljs-built_in\">this</span>.ball.create();\n}\n\ngameEnded() {\n    <span class=\"hljs-comment\">// clear the screen</span>\n    <span class=\"hljs-built_in\">this</span>.playerL.destroy();\n    <span class=\"hljs-built_in\">this</span>.playerR.destroy();\n    <span class=\"hljs-built_in\">this</span>.score.leftText?.destroy();\n    <span class=\"hljs-built_in\">this</span>.score.rightText?.destroy();\n\n    <span class=\"hljs-keyword\">const</span> winner = <span class=\"hljs-built_in\">this</span>.score.left &gt; <span class=\"hljs-built_in\">this</span>.score.right ? <span class=\"hljs-string\">\"Left\"</span> : <span class=\"hljs-string\">\"Right\"</span>;\n\n    <span class=\"hljs-built_in\">this</span>.add.text(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${winner}</span> Player Won`</span>, {\n      fontSize: <span class=\"hljs-string\">\"64px\"</span>,\n      color: <span class=\"hljs-string\">\"#fff\"</span>,\n    });\n}\n</code></pre>\n<p>we also need to change the update method for <code>Player</code> to check if the gameObject is existing:</p>\n<p><em>Player.ts</em></p>\n<pre><code class=\"lang-ts\">update() {\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.gameObject) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-built_in\">this</span>.gameObject?.setVelocity(<span class=\"hljs-number\">0</span>);\n\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.keyUp?.isDown) {\n      <span class=\"hljs-built_in\">this</span>.gameObject?.setVelocityY(<span class=\"hljs-number\">-300</span>);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.keyDown?.isDown) {\n      <span class=\"hljs-built_in\">this</span>.gameObject?.setVelocityY(<span class=\"hljs-number\">300</span>);\n    }\n}\n\ndestroy() {\n    <span class=\"hljs-built_in\">this</span>.gameObject?.destroy();\n    <span class=\"hljs-built_in\">this</span>.gameObject = <span class=\"hljs-literal\">undefined</span>;\n}\n</code></pre>\n<p>And this is the result</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660590338865/UGGpXtfjw.png\" alt=\"game won\" /></p>\n<h2 id=\"heading-the-end\">The end</h2>\n<p>To summarize, we created a simple pong game with phaser and Typescript. We started with planning the project and writing the required tasks for a minimum implementation, then we built the project structure from a template we found online that uses Phaser, Vite, and TypeScript. From there, we started implementing the actual game. First drawing the basic game objects on the screen, then we let the two players control their paddle and made the ball bounce around the screen. </p>\n<p>After this was done, and with the knowledge we collected, we refactored the code to be structured better (very subjective opinion). We added scores and announced who's the winner.</p>\n<h3 id=\"heading-links\">Links</h3>\n<ul>\n<li><a target=\"_blank\" href=\"phaser-pong-bwqlkrd2m-chiptus.vercel.app\">This version of the game</a></li>\n<li><a target=\"_blank\" href=\"https://github.com/chiptus/phaser-pong\">Code Repository</a></li>\n</ul>\n<h3 id=\"heading-quick-things-we-should-add\">Quick things we should add</h3>\n<ul>\n<li>The ability to restart the game</li>\n<li>Sounds</li>\n<li>Make the ball go in a different direction every time</li>\n</ul>\n","contentMarkdown":"My first task was creating a clone of [Pong](https://en.wikipedia.org/wiki/Pong), Pong is one of the earliest arcade games ever created, it's based on a game of ping pong, where you have two paddles and a ball and need to prevent the ball from crossing your paddle. It can be played with 2 players, each controlling his own paddle, or with one player and the computer controlling the other.\n\nI see it as some form of a \"hello world\" example for game development. It has a few simple game objects (2 paddles and a ball), the ball should bounce off the paddles, and if a ball touches the screen behind a paddle the game is finished.\n\nIt can also be extended, to add the concept of a score, and play towards a score. you can add sounds to it, and another main screen to choose how many players are playing. Further, we can add support for multiplayer, playing online for high scores, and mobile gaming.\n\n## How to start?\n\nEvery development project should start not with writing code (although I did and still do it many times), but with writing some text. Objectives, minimal objectives, and nice to have extensions, write some plan, which objects I am going to have, how they interact, and write a list of tasks.\n\n## Plan\n\n### Game objects:\n\n- Ball\n- Paddle\n- Score\n\n### Game rules:\n\n- Player 1 controls the left paddle\n- Player 2 controls the right paddle\n- The ball bounces off the walls\n- The ball bounces off the paddles\n- The ball is lost if it goes off the top or bottom of the screen\n\n### Screens:\n\n- Main menu\n  - Choose the number of players\n  - Play\n- Game screen\n- Game over screen\n- High score screen\n\n### MVP Tasks\n\n- Create a game object for the ball\n- Create a game object for the paddles\n- Create a game object for the score\n- Game screen\n  - Draw the ball\n  - Draw the paddles\n  - Draw the score\n  - 2 Players:\n    - Player 1 controls the left paddle (W and S)\n    - Player 2 controls the right paddle (Up and Down)\n  - Ball starts in the middle of the screen and goes to the direction of the paddle that hit it last (or to player 1 if none)\n  - The ball bounces off the walls\n  - The ball bounces off the paddles\n  - The ball is lost if it goes off the left or right of the screen\n  - The game is won if a player reaches 10 points\n\n### Possible Extensions\n\n- More screens\n- 1 player game\n- mobile game\n\nMVP stands for \"Minimum Viable Product\", it's the minimum requirement I need to release. I've got to say thanks to [Github Co-pilot](https://github.com/features/copilot) which added some requirements and tasks I didn't think about. I'm having a hard time writing documents, and it's nice that tools like that help with it. I don't use CoPilot to write this blog :)\n\n## Part 1 - Creating a structure for the game.\n\none of my problems with the phaser tutorial is that the code is written in bare HTML, inside a script tag. For a first tutorial, it's great, because it shows the bare minimum of what I need to create a game, but if we want the code to be small and easy to reason about, we should use a bundler, like webpack or vite, and maybe a type system like TypeScript. So I went looking for a project structure to start from, one using vite and typescript. Why vite? because I never used it and I wanted to try it.\n\nI found https://github.com/ubershmekel/vite-phaser-ts-starter which looks pretty good and basic to start from. its only dependencies were typescript, vite, and phaser, and it had an index.html, main.ts, menu-scene.ts, and style.css. So I took it. I forked the repository into https://github.com/chiptus/phaser-pong and pulled it to my local computer.\n\nUsually, my first thing would be to clean the things I don't need, but as it's my first project, I wasn't sure what was not needed so I just went with it. I did upgrade phaser to its last beta version and added the list I made under Plan.\n\n## Part 2 - Drawing the initial screen\n\nI also needed two assets, the paddles and a ball. I went with the simplest things, opened Pinta and drew a circle and a line, and saved it as a png.\n\nThen I went into vscode and started writing the code to draw the initial screen.\n\nThe project structure I used had an index.html, which is the starting point of this project, and this is how vite knows what to compile. It includes a few buttons to make the screen full screen, mute the game and reload the page. It also includes `<div id=\"app\" />` element that is where Phaser will inject the game, and a script tag that points to `/src/main.ts`. vite knows how to process this tag.\n\n`main.ts` is the main script file. It initiates the Game and configures it. It also imports the list of scenes we have in this game, here we have only one scene `MenuScene`. `MenuScene` creates a simple \"game\" which has a random number of particles falling from the sky, and pressing \"S\" restarts it with a gasping sound.\n\nI deleted the menu scene and created a new `game-scene` file that contains a `GameScene` class that extends `Phaser.Scene` the base Scene class for Phaser. Similar to the phaser tutorial, we can implement `preload`, `create` and `update` functions to run the game\n\nMy first objective is to draw the scene, so let's import the ball and paddle images:\n\n```ts\n// at the top\nimport ballUrl from \"../assets/ball.png\";\nimport paddleUrl from \"../assets/paddle.png\";\n\n// inside the class definition\npreload(): void {\n\tthis.load.image(\"ball\", ballUrl);\n    this.load.image(\"paddle\", paddleUrl);\n}\n```\n\nthe import statements are importing the images as URL, and in `preload` we can use that URL to load the image.\n\nin `create` we actually draw the scene:\n\n```ts\ncreate(): void {\n\t// draw the ball\n\tthis.add.image(400, 300, \"ball\");\n\n\t// draw left player\n\tconst playerL = this.physics.add.image(50, 300, \"paddle\");\n\tplayerL.setCollideWorldBounds(true);\n\n\t// draw right player\n    const playerR = this.physics.add.image(750, 300, \"paddle\");\n\tplayerR.setCollideWorldBounds(true);\n}\n```\n\nnow we should see something like this:\n\n![Initial Screen](https://cdn.hashnode.com/res/hashnode/image/upload/v1660590193505/uiU6zolzM.png align=\"left\")\n\nyou might see your game screen expands. I still need to work it out, but removing the lines\n\n```ts\n    mode: Phaser.Scale.FIT,\n    autoCenter: Phaser.Scale.CENTER_BOTH,\n```\n\nfrom `main.ts` fixed it.\n\n## Part 3 - Controlling the paddles\n\nIn this part, we want to be able to control the paddles using our keyboard. Looking to our requirements, the right player should be able to use \"Up\" and \"Down\" cursors to control his paddle while the left player should be able to use the \"W\" and \"S\" keys.\n\nWe need a way to catch clicking on those different keyboard keys and move the paddles accordingly. This is usually done in the `update` method of the scene. Since it's a class, we don't want to use global variables for the players and keys like we did one the phaser tutorial, but we will bind them to the class.\n\nSo we need to add the right fields to our scene class:\n\n```ts\nexport class GameScene extends Phaser.Scene {\n  playerL?: Phaser.Types.Physics.Arcade.ImageWithDynamicBody;\n  playerR?: Phaser.Types.Physics.Arcade.ImageWithDynamicBody;\n\n  cursors?: {\n    keyW: Phaser.Input.Keyboard.Key;\n    keyS: Phaser.Input.Keyboard.Key;\n    keyUp: Phaser.Input.Keyboard.Key;\n    keyDown: Phaser.Input.Keyboard.Key;\n  };\n\n...\n```\n\nHow did I know the right types? by checking the return value for `this.physics.add.image` and for the keys, by checking the functions we will use soon.\n\nthe create function will be modified to the following:\n\n```ts\ncreate(): void {\n    // draw the ball\n\tthis.add.image(400, 300, \"ball\");\n\n\t// draw left player\n\tthis.playerL = this.physics.add.image(50, 300, \"paddle\");\n\tthis.playerL.setCollideWorldBounds(true);\n\n\t// draw right player\n\tthis.playerR = this.physics.add.image(750, 300, \"paddle\");\n\tthis.playerR.setCollideWorldBounds(true);\n\n\tconst keyW = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);\n    const keyS = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);\n    const keyUp = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.UP);\n    const keyDown = this.input.keyboard.addKey(\n      Phaser.Input.Keyboard.KeyCodes.DOWN\n    );\n\n    this.cursors = {\n      keyW,\n      keyS,\n      keyUp,\n      keyDown,\n    };\n}\n```\n\ninstead of just drawing the players we save the return value of `.add.image` to `this.playerX` and we're adding a pointer to the relevant keyboard keys.\n\nhandling key press and changing the player velocity is done in `update`:\n\n```ts\nupdate(): void {\n    // make sure all relevant properties are defined\n    if (!this.playerL || !this.playerR || !this.cursors) {\n      return;\n    }\n\n    // handle left player movement\n    this.playerL.setVelocity(0);\n\n    if (this.cursors.keyW.isDown) {\n      this.playerL.setVelocityY(-300);\n    } else if (this.cursors.keyS.isDown) {\n      this.playerL.setVelocityY(300);\n    }\n\n    // handle right player movement\n    this.playerR.setVelocity(0);\n\n    if (this.cursors.keyUp.isDown) {\n      this.playerR.setVelocityY(-300);\n    } else if (this.cursors.keyDown.isDown) {\n      this.playerR.setVelocityY(300);\n    }\n}\n```\n\nThe first line is what typescripts calls [Type Narrowing](https://www.typescriptlang.org/docs/handbook/2/narrowing.html). Although we know (from create) that all the class properties should be defined, TypeScript doesn't have a way to know that `create` is always called before `update`, so `this.playerL` can be undefined. So we add a check for falsy values, and after the first `if` statement, we know that `playerL` and the other properties are defined.\n\nThe handling of both player's movements is almost the same, the only difference is the keys we use:\n\n1. set speed to 0 - this makes sure that if any key is not clicked, the paddle won't move.\n2. if up key (w for playerL) - set speed to negative 300, so the paddle will go up.\n3. if down key (s for playerL) - move down\n\nIt should work like this:\n![moving paddles](https://cdn.hashnode.com/res/hashnode/image/upload/v1660590232719/_X7J3ruPp.gif align=\"left\")\n\n## Part 3 - Bouncing ball\n\nLike we did for the players, let's add a ball property for the ball game object and save the game object to it:\n\n```ts\nclass GameScene {\n  ball?: Phaser.Types.Physics.Arcade.ImageWithDynamicBody;\n\n  create(): void {\n    this.ball = this.physics.add.image(400, 300, \"ball\");\n  }\n}\n```\n\nthe ball is required to:\n\n- move\n\n```ts\nthis.ball.setVelocity(200, 200);\n```\n\n- collide with the world bounds\n\n```ts\nthis.ball.setCollideWorldBounds(true);\n```\n\n- collide with the paddles\n\n```ts\nthis.physics.add.collider(this.playerL, this.ball);\nthis.physics.add.collider(this.playerR, this.ball);\n```\n\n- bounce off of them\n\n```ts\nthis.ball.setBounce(1);\n```\n\n- stop the game if colliding with the left or right world bounds.\n\nWe will do this soon, let's see how it goes until now:\n\n```ts\nthis.ball = this.physics.add.image(400, 300, \"ball\");\nthis.ball.setVelocity(200, 200);\nthis.ball.setCollideWorldBounds(true);\nthis.physics.add.collider(this.playerL, this.ball);\nthis.physics.add.collider(this.playerR, this.ball);\nthis.ball.setBounce(1);\n```\n\nFor some reason, if you look at your game, the ball bounces nicely when touching the world bounds, but touching the paddles this happens:\n\n![wrong ball paddle bounce](https://cdn.hashnode.com/res/hashnode/image/upload/v1660590293992/LhbIH0CYR.gif align=\"left\")\n\nThis took me a long time to solve. Looking into the tutorial didn't help as it uses almost exactly the same code. I don't remember how I found it out, but the realization that in contrast to the tutorial where the platforms were static objects, here, the paddles are dynamic, and we can't make them static, because they should move. So I have found the property of a dynamic object called `pushable` . from the [docs](https://photonstorm.github.io/phaser3-docs/Phaser.Physics.Arcade.Components.Pushable.html):\n\n> A body that cannot be pushed will reflect back all the velocity given to the colliding body. If that body is also not pushable, then the separation will be split between them evenly.\n\nThe following solves the issue:\n\n```ts\nthis.playerL.setPushable(false);\nthis.playerR.setPushable(false);\n```\n\nThe last thing we need is to stop the ball when it reaches the left/right world bounds. A world object `this.physics.world` has an event called `worldbounds` (or the constant `Phaser.Physics.Arcade.Events.WORLD_BOUNDS` - better to use), but it's only called for game objects that have the property `gameObject.body.onWorldBounds = true`. I guess it's to reduce memory usage. so we need to run the following code:\n\n```ts\nthis.ball.body.onWorldBounds = true;\nthis.physics.world.on(\n  Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n  (\n    body: Phaser.Physics.Arcade.Body,\n    up: boolean,\n    down: boolean,\n    left: boolean,\n    right: boolean\n  ) => {\n    // to filter events on other objects\n    if (body.gameObject !== this.ball) {\n      return;\n    }\n\n    // only stop if it reaches to left or right bounds\n    if (right || left) {\n      this.ball.setVelocity(0, 0);\n    }\n  }\n);\n```\n\n## Part 4 - A little refactor\n\nAs the game scene file becomes bigger, it also becomes more unreadable, so I think it's time to do some refactoring before doing anything else.\n\nLet's move the player and ball logic into two respective classes:\n\n_Player.ts_\n\n```ts\nexport class Player {\n  constructor(options) {}\n  create() {}\n  update() {}\n}\n```\n\n_Ball.ts_\n\n```ts\nexport class Ball {\n  constructor(options) {}\n  create() {}\n  update() {}\n}\n```\n\nThese classes will handle all the logic that is related to their objects and we will use them like this:\n\n_game-scene.ts_\n\n```ts\nexport class GameScene extends Phaser.Scene {\n\tball: Ball;\n\tplayerL: Player;\n\tplayerR: Player;\n\n\t constructor() {\n\t    super({\n\t      key: \"GameScene\",\n\t    });\n\n\t    this.playerL = new Player({scene: this});\n\t    this.playerR = new Player({scene: this});\n\t    this.ball = new Ball({scene: this})\n\t}\n\n\t...\n\n\tcreate() {\n\t\tthis.playerL.create()\n\t\tthis.playerR.create()\n\t\tthis.ball.create()\n\t}\n\n\tupdate() {\n\t\tthis.playerL.update()\n\t\tthis.playerR.update()\n\t\tthis.ball.update()\n\t}\n}\n```\n\nThese are the basics, we will change some of them. like adding collisions between the players and the ball.\n\neach object needs to be drawn, let's do that first:\n\n### Draw the objects\n\n_Player.ts_\n\n```ts\nimport { Physics, Scene } from \"phaser\";\n\ninterface Options {\n  scene: Scene;\n}\n\nexport class Player {\n  scene: Scene;\n  gameObject?: Physics.Arcade.Image;\n\n  constructor({ scene }: Options) {\n    this.scene = scene;\n  }\n\n  create() {\n    // draw left player\n    this.gameObject = this.scene.physics.add.image(50, 300, \"paddle\");\n    this.gameObject.setCollideWorldBounds(true);\n    this.gameObject.setPushable(false);\n  }\n\n  update() {}\n}\n```\n\nthis will draw the left player, to draw the right player we need to pass a different X value to `add.image`. We can use the Options interface for it:\n\n_Player.ts_\n\n```ts\nimport { Physics, Scene } from \"phaser\";\n\ninterface Options {\n  scene: Scene;\n  startX: number;\n}\n\nexport class Player {\n  scene: Scene;\n  gameObject?: Physics.Arcade.Image;\n  startX: number;\n\n  constructor({ scene, startX }: Options) {\n    this.scene = scene;\n    this.startX = startX;\n  }\n\n  create() {\n    // draw left player\n    this.gameObject = this.scene.physics.add.image(this.startX, 300, \"paddle\");\n    this.gameObject.setCollideWorldBounds(true);\n    this.gameObject.setPushable(false);\n  }\n\n  update() {}\n}\n```\n\n_game-scene.ts_\n\n```ts\nthis.playerL = new Player({ scene: this, startX: 50 });\nthis.playerR = new Player({ scene: this, startX: 750 });\n```\n\nNow for the ball, it's very similar:\n\n_Ball.ts_\n\n```ts\nimport { Scene } from \"phaser\";\n\ninterface Options {\n  scene: Scene;\n}\n\nexport class Ball {\n  scene: Scene;\n  gameObject?: Phaser.Physics.Arcade.Image;\n\n  constructor({ scene }: Options) {\n    this.scene = scene;\n  }\n\n  create() {\n    this.gameObject = this.scene.physics.add.image(400, 300, \"ball\");\n  }\n\n  update() {}\n}\n```\n\nNow we should be able to see the same screen we see at the end of Part 2.\n\n### Control the paddles\n\nTo move the paddles, the game scene needs to tell each player which keys are controlling it:\n\n_game-scene.ts_\n\n```ts\nthis.playerL = new Player({\n  scene: this,\n  startX: 50,\n  cursors: {\n    keyDown: Phaser.Input.Keyboard.KeyCodes.S,\n    keyUp: Phaser.Input.Keyboard.KeyCodes.W,\n  },\n});\nthis.playerR = new Player({\n  scene: this,\n  startX: 750,\n  cursors: {\n    keyDown: Phaser.Input.Keyboard.KeyCodes.DOWN,\n    keyUp: Phaser.Input.Keyboard.KeyCodes.UP,\n  },\n});\n```\n\nand in `Player.ts` we need to respond to them\n\n```ts\nimport { Physics, Scene } from \"phaser\";\n\ninterface CursorOptions {\n  keyUp: number;\n  keyDown: number;\n}\n\ninterface Options {\n  scene: Scene;\n  startX: number;\n  cursors: CursorOptions;\n}\n\nexport class Player {\n  scene: Scene;\n  startX: number;\n  cursorOptions: CursorOptions;\n\n  gameObject?: Physics.Arcade.Image;\n  keyUp?: Phaser.Input.Keyboard.Key;\n  keyDown?: Phaser.Input.Keyboard.Key;\n\n  constructor({ scene, startX, cursors }: Options) {\n    this.scene = scene;\n    this.startX = startX;\n    this.cursorOptions = cursors; // accept the cursor keys\n  }\n\n  create() {\n    this.gameObject = this.scene.physics.add.image(this.startX, 300, \"paddle\");\n    this.gameObject.setCollideWorldBounds(true);\n    this.gameObject.setPushable(false);\n\n    // bind to these keys\n    this.keyUp = this.scene.input.keyboard.addKey(this.cursorOptions.keyUp);\n    this.keyDown = this.scene.input.keyboard.addKey(this.cursorOptions.keyDown);\n  }\n\n  update() {\n    // handle player movement\n    this.gameObject?.setVelocity(0);\n\n    if (this.keyUp?.isDown) {\n      this.gameObject?.setVelocityY(-300);\n    } else if (this.keyDown?.isDown) {\n      this.gameObject?.setVelocityY(300);\n    }\n  }\n}\n```\n\n### Bounce the ball\n\nFirst, we can add the following lines to Ball's create method, so the ball moves and collides with the world bounds:\n\n```ts\nthis.gameObject.setVelocity(200, 200);\nthis.gameObject.setCollideWorldBounds(true);\nthis.gameObject.setBounce(1);\n```\n\nNow, the ball passes through the paddles, and we should add set the ball to collide with them. So the ball should have a reference to them:\n\n```ts\ntype PlayerTuple = [Player, Player];\n\ninterface Options {\n  scene: Scene;\n  players: PlayerTuple\n}\n\nexport class Ball {\n  scene: Scene;\n  players: PlayerTuple\n\n  gameObject?: Phaser.Physics.Arcade.Image;\n\n  constructor({ scene, players }: Options) {\n    this.scene = scene;\n    this.players = players\n  }\n\n\t...\n\n}\n```\n\n_game-scene.ts_\n\n```ts\nthis.ball = new Ball({\n  scene: this,\n  players: [this.playerL, this.playerR],\n});\n```\n\nand now I can add a collision with their game object:\n_Ball.ts_\n\n```ts\ncreate() {\n\t...\n\tthis.players.forEach((p) => {\n      if (p.gameObject && this.gameObject) {\n        this.scene.physics.add.collider(this.gameObject, p.gameObject);\n      }\n    });\n}\n\n```\n\nit's not the most beautiful piece of code I wrote, but it works.\n\nand we need to make sure the ball stops when it collides with the right or left bounds:\n\n_Ball.ts_\n\n```ts\nthis.gameObject.body.onWorldBounds = true;\nthis.scene.physics.world.on(\n  Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n  (\n    body: Phaser.Physics.Arcade.Body,\n    up: boolean,\n    down: boolean,\n    left: boolean,\n    right: boolean\n  ) => {\n    if (body.gameObject !== this.gameObject) {\n      return;\n    }\n\n    if (right || left) {\n      this.gameObject.setVelocity(0, 0);\n    }\n  }\n);\n```\n\nTypescript will complain about `this.gameObject.body.onWorldBounds` being unreadable, so we need to change `gameObject` type to `Phaser.Types.Physics.Arcade.ImageWithDynamicBody`\n\n## Part 5 - Taking score\n\nSo now we have the option to play 2 players until the ball reaches the screen bounds. Let's add score to the game. We can have each player hold his score, but since it's a state that the game notices, we will keep it in the Scene object:\n\n_game-scene.ts_\n\n```ts\nclass GameScene {\n\tscore: {\n\t\tleft: number;\n\t\tleftText?: Phaser.GameObjects.Text;\n\t\tright: number;\n\t\trightText?: Phaser.GameObjects.Text;\n\t};\n\n\n\tconstructor() {\n\t\t...\n\n\t\tthis.score = {\n\t      left: 0,\n\t      right: 0,\n\t    };\n\t}\n\n\tcreate() {\n\t\tthis.score.leftText = this.add.text(16, 16, \"Left: 0\", {\n\t\t\tfontSize: \"32px\",\n\t\t\tcolor: \"#fff\",\n\t\t});\n\n\t\tthis.score.rightText = this.add.text(800 - 400, 16, \"Right: 0\", {\n\t\t\tfontSize: \"32px\",\n\t\t\tcolor: \"#fff\",\n\t\t});\n\t}\n}\n```\n\nnow to track when we need to change the score, we need to call a function (callback) whenever the ball touches one of the sides. We already have this check in the Ball class:\n\n```ts\n...\nthis.scene.physics.world.on(\n      Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n\t  (\n\t\tbody: Phaser.Physics.Arcade.Body,\n\t\t_up: boolean,\n\t\t_down: boolean,\n\t\tleft: boolean,\n\t\tright: boolean\n\t  ) => {\n\t\tif (body.gameObject !== this.gameObject) {\n\t\t  return;\n\t\t}\n\n\t\tif (right || left) {\n\t\t  this.gameObject.setVelocity(0, 0);\n\t\t}\n\t  }\n```\n\ninstead of stopping the ball, we will do two things:\n\n1. destroy the ball\n2. call a callback that is provided to the create function\n\n```ts\ncreate(onCollideWithWorldBound: (winner: \"left\" | \"right\") => void) {\n\t...\n\tthis.scene.physics.world.on(\n      Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n      (\n        body: Phaser.Physics.Arcade.Body,\n        _up: boolean,\n        _down: boolean,\n        left: boolean,\n        right: boolean\n      ) => {\n        if (body.gameObject !== this.gameObject) {\n          return;\n        }\n\n        if (right || left) {\n\t        // destroy the ball\n          this.gameObject.destroy();\n          // call the provided callback\n          onCollideWithWorldBound(left ? \"right\" : \"left\");\n        }\n      }\n}\n```\n\nnow in `game-scene.ts` we will provide this callback that will add a point to the correct player:\n\n_game-scene.ts_\n\n```ts\ncreate() {\n\t...\n    this.ball.create((winner) => {\n      this.addPoint(winner);\n    });\n}\n\naddPoint(winner: \"left\" | \"right\") {\n\t// add a point to the winner\n\tthis.score[winner]++;\n\t// write that new score on the screen\n    this.score[`${winner}Text`]?.setText(\n      `${capitalize(winner)}: ${this.score[winner]}`\n    );\n}\n```\n\nAs you see, `this.ball.create` now calls a callback (from knowing the code on `Ball.ts` we know it's called when the ball collides with the world bounds). This callback now calls `addPoint`. and `addPoint` saves the new score and draws that on the screen.\n\n## Part 6 - Count scores up to 10\n\nWe want to continue playing until one of the players has a score of 10. Let's first see how to continue playing. We need to recreate the ball. We don't need to recreate the whole `Ball` object, we just need to call `this.ball.create` again:\n\n```ts\ncreate() {\n    this.playerL.create();\n    this.playerR.create();\n    this.ball.create((winner) => {\n\t    this.addPoint(winner);\n\t    this.ball.create();\n\t});\n}\n```\n\nThis was actually surprising for me, I expected the ball to appear twice, but the callback we gave the first `this.ball.create` is called again and again, because we added the event on the world object, which we don't destroy. The thing I missed here is what we call `closure`, and that means that `onCollideWithWorldBound` will always exist in the context of the event handler we're running on `this.scene.physics.world.on` (I simplify it, go read about [closure](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures))\n\nSo I suggest moving the setting of the callback to a `setCallback` method on the ball that will be called once in `create` of `GameScene`:\n\n```ts\nsetCallback(onCollideWithWorldBound: (winner: \"left\" | \"right\") => void) {\n    this.scene.physics.world.on(\n      Phaser.Physics.Arcade.Events.WORLD_BOUNDS,\n      (\n        body: Phaser.Physics.Arcade.Body,\n        _up: boolean,\n        _down: boolean,\n        left: boolean,\n        right: boolean\n      ) => {\n        if (body.gameObject !== this.gameObject) {\n          return;\n        }\n\n        if (right || left) {\n          // destroy the ball\n          this.gameObject.destroy();\n          // call the provided callback\n          onCollideWithWorldBound(left ? \"right\" : \"left\");\n        }\n      }\n    );\n  }\n\n  create() {\n    this.gameObject = this.scene.physics.add.image(400, 300, \"ball\");\n    this.gameObject.setVelocity(200, 200);\n    this.gameObject.setCollideWorldBounds(true);\n    this.gameObject.setBounce(1);\n    this.players.forEach((p) => {\n      if (p.gameObject && this.gameObject) {\n        this.scene.physics.add.collider(this.gameObject, p.gameObject);\n      }\n    });\n\n    this.gameObject.body.onWorldBounds = true;\n  }\n```\n\nsee how we removed the setting of the callback to another method that isn't called on `create`.\n\n_game-scene.ts_\n\n```ts\ncreate() {\n    this.playerL.create();\n    this.playerR.create();\n\n    this.ball.setCallback((winner) => {\n      this.addPoint(winner);\n      this.ball.create();\n    });\n\n    this.ball.create();\n  }\n```\n\nNow our game will be played until one of the players gets tired :)\n\nLet's stop the game when one of the players gets a score of 10:\n\n```ts\nthis.ball.setCallback((winner) => {\n  this.addPoint(winner);\n  if (this.score[winner] < 10) {\n    this.ball.create();\n  }\n});\n```\n\n\n## Part 7 - show the winner\n\nTo show the winner, I think ideally it would be to create another scene, but that's a good enhancement we can add later.\n\n*game-scene.ts*\n```ts\n...\n\ncreate() {\n\n    this.ball.setCallback((winner) => {\n      this.addPoint(winner);\n      if (this.score[winner] < 10) {\n        this.ball.create();\n      } else {\n        this.gameEnded();\n      }\n    });\n\n    this.ball.create();\n}\n\ngameEnded() {\n\t// clear the screen\n    this.playerL.destroy();\n    this.playerR.destroy();\n    this.score.leftText?.destroy();\n    this.score.rightText?.destroy();\n\n    const winner = this.score.left > this.score.right ? \"Left\" : \"Right\";\n\n    this.add.text(100, 200, `${winner} Player Won`, {\n      fontSize: \"64px\",\n      color: \"#fff\",\n    });\n}\n\n```\n\nwe also need to change the update method for `Player` to check if the gameObject is existing:\n\n*Player.ts*\n```ts\nupdate() {\n    if (!this.gameObject) {\n      return;\n    }\n\n    this.gameObject?.setVelocity(0);\n\n    if (this.keyUp?.isDown) {\n      this.gameObject?.setVelocityY(-300);\n    } else if (this.keyDown?.isDown) {\n      this.gameObject?.setVelocityY(300);\n    }\n}\n\ndestroy() {\n    this.gameObject?.destroy();\n    this.gameObject = undefined;\n}\n```\n\nAnd this is the result\n\n\n![game won](https://cdn.hashnode.com/res/hashnode/image/upload/v1660590338865/UGGpXtfjw.png align=\"left\")\n\n\n\n## The end\nTo summarize, we created a simple pong game with phaser and Typescript. We started with planning the project and writing the required tasks for a minimum implementation, then we built the project structure from a template we found online that uses Phaser, Vite, and TypeScript. From there, we started implementing the actual game. First drawing the basic game objects on the screen, then we let the two players control their paddle and made the ball bounce around the screen. \n\nAfter this was done, and with the knowledge we collected, we refactored the code to be structured better (very subjective opinion). We added scores and announced who's the winner.\n\n### Links\n- [This version of the game](phaser-pong-bwqlkrd2m-chiptus.vercel.app)\n- [Code Repository](https://github.com/chiptus/phaser-pong)\n\n### Quick things we should add\n- The ability to restart the game\n- Sounds\n- Make the ball go in a different direction every time\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b953f2","62fb8c251ebeafdc3d329813"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5592.0307,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":false,"enableToc":false,"toc":[[{"id":"21ac8b90-d6b8-4337-9cd1-6e5e2a4c0e4e","level":2,"previousLevel":null,"parentId":null,"slug":"how-to-start","title":"How to start?"}],[{"id":"1c997df2-3170-469c-ba5d-a7c109a2c6ae","level":2,"previousLevel":2,"parentId":null,"slug":"plan","title":"Plan"}],[{"id":"75941af5-3dcd-4140-8e03-38f92f25ee96","level":3,"previousLevel":2,"parentId":"1c997df2-3170-469c-ba5d-a7c109a2c6ae","slug":"game-objects","title":"Game objects:"}],[{"id":"7d67d19e-79e9-4f0e-8f2b-f32fb1e327b8","level":3,"previousLevel":3,"parentId":"1c997df2-3170-469c-ba5d-a7c109a2c6ae","slug":"game-rules","title":"Game rules:"}],[{"id":"a601fdc8-e27e-4cda-8022-28017c594739","level":3,"previousLevel":3,"parentId":"1c997df2-3170-469c-ba5d-a7c109a2c6ae","slug":"screens","title":"Screens:"}],[{"id":"b5c114d0-819c-425a-845f-ca3a1c3d5add","level":3,"previousLevel":3,"parentId":"1c997df2-3170-469c-ba5d-a7c109a2c6ae","slug":"mvp-tasks","title":"MVP Tasks"}],[{"id":"40c14b31-1eee-45b9-ac35-cf2dd22def32","level":3,"previousLevel":3,"parentId":"1c997df2-3170-469c-ba5d-a7c109a2c6ae","slug":"possible-extensions","title":"Possible Extensions"}],[{"id":"73516ddf-53fb-459b-beb5-ac9d79d000d2","level":2,"previousLevel":3,"parentId":null,"slug":"part-1-creating-a-structure-for-the-game","title":"Part 1 - Creating a structure for the game."}],[{"id":"34f87141-66d3-46a0-9ed8-63422e046542","level":2,"previousLevel":2,"parentId":null,"slug":"part-2-drawing-the-initial-screen","title":"Part 2 - Drawing the initial screen"}],[{"id":"f486a0df-0433-4550-a72c-5ce3ba3b8676","level":2,"previousLevel":2,"parentId":null,"slug":"part-3-controlling-the-paddles","title":"Part 3 - Controlling the paddles"}],[{"id":"b4fa5959-e198-4bae-b3d5-55b00c516349","level":2,"previousLevel":2,"parentId":null,"slug":"part-3-bouncing-ball","title":"Part 3 - Bouncing ball"}],[{"id":"862a0988-9f43-4a49-a7c9-be0b97e07521","level":2,"previousLevel":2,"parentId":null,"slug":"part-4-a-little-refactor","title":"Part 4 - A little refactor"}],[{"id":"c88f7372-b9b6-465c-bac3-c4a98f1452f1","level":3,"previousLevel":2,"parentId":"862a0988-9f43-4a49-a7c9-be0b97e07521","slug":"draw-the-objects","title":"Draw the objects"}],[{"id":"845a457d-1030-44f0-9dcb-385add246d15","level":3,"previousLevel":3,"parentId":"862a0988-9f43-4a49-a7c9-be0b97e07521","slug":"control-the-paddles","title":"Control the paddles"}],[{"id":"8c922161-1453-4781-bf7c-0a9974286e27","level":3,"previousLevel":3,"parentId":"862a0988-9f43-4a49-a7c9-be0b97e07521","slug":"bounce-the-ball","title":"Bounce the ball"}],[{"id":"86795da3-4654-4c87-847a-5b09c40443de","level":2,"previousLevel":3,"parentId":null,"slug":"part-5-taking-score","title":"Part 5 - Taking score"}],[{"id":"f148f565-da9a-40a1-a1bb-978e49216199","level":2,"previousLevel":2,"parentId":null,"slug":"part-6-count-scores-up-to-10","title":"Part 6 - Count scores up to 10"}],[{"id":"925c4ef0-7568-4858-bd28-c36bb0484808","level":2,"previousLevel":2,"parentId":null,"slug":"part-7-show-the-winner","title":"Part 7 - show the winner"}],[{"id":"b134141f-2de1-4c81-bbb2-dcb6d4b26992","level":2,"previousLevel":2,"parentId":null,"slug":"the-end","title":"The end"}],[{"id":"3fae0366-2914-43c0-9417-bb3289e302ad","level":3,"previousLevel":2,"parentId":"b134141f-2de1-4c81-bbb2-dcb6d4b26992","slug":"links","title":"Links"}],[{"id":"38cf232f-78c5-4c78-aa9f-043fb7968a18","level":3,"previousLevel":3,"parentId":"b134141f-2de1-4c81-bbb2-dcb6d4b26992","slug":"quick-things-we-should-add","title":"Quick things we should add"}]],"numUniqueUsersWhoReacted":0,"title":"Creating Pong","subtitle":"Creating my first game in Phaser","pollOptions":[],"type":"story","coverImageAttribution":"https://unsplash.com/@ellenqin","coverImagePhotographer":"Ellen Qin","isCoverAttributionHidden":true,"ogImage":"","metaTitle":"How to create pong using phaser","metaDescription":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"62effcb6dfc2b15565884099","slug":"creating-pong","importedFromMedium":false,"dateAdded":"2022-08-16T12:23:00.747Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl6w5o4kb001jvknv9u85cm3s","author":"56b2ebc410979efc2b9a910e","followersCount":1,"draft":"62fa9845be14cfbd5d7c905c","readTime":17,"__v":0,"series":null,"dateUpdated":"2022-08-16T12:24:42.062Z","pendingPublicationApproval":false,"viewsUpdatedOn":1713087033538,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"62fb8c241ebeafdc3d329811"},{"reward":{"type":"xlm"},"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"_id":"62f649eefffdab933bde466f","sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":15,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/unsplash/_R95VMWyn7A/upload/v1660652415091/Q_54qeU-UX.jpeg","autoGeneratedCover":"","brief":"In this article I follow https://phaser.io/tutorials/making-your-first-phaser-3-game, developing a small platform game. A platform game is a game where the user jumps between platforms, collects stuff, and avoids/fights enemies.\nIn my first post I ca...","content":"<p>In this article I follow https://phaser.io/tutorials/making-your-first-phaser-3-game, developing a small platform game. A platform game is a game where the user jumps between platforms, collects stuff, and avoids/fights enemies.</p>\n<p>In my first post I called phaser a \"game engine\", and here they describe it as a \"game framework\". That might be the same, I'll need to research it. Phaser helps us develop games specifically for the browser using a JavaScript API.</p>\n<p>I copied the folder I made for my previous article [[02 starting with phaser]] and extracted the zip file from the tutorial into a <code>solutions</code> folder. I prefer to write the code myself instead of copy-pasting or just having it present. So I use the zip file for the assets in case something doesn't work.</p>\n<p><code>part1.html</code> file has the basic structure as we talked about in the last post, along with an <code>update</code> function, so let's just move its content into <code>index.html</code>. I do copy-paste this time because we already went over this code.</p>\n<p>It's fun to read and see that some of my guesses were right.</p>\n<p>Going into part 2 I see that as I guessed the preload event is when you load your assets and name them. We load 4 images (<code>this.load.image(alias, url)</code>) and we also load a sprite sheet. If sprites are the same as in web dev, we don't use them often these days, but in the past, they have been used the make loading faster, so you load the same image once, and just show part of the sprite. It's a big image, separated into frames, where each frame is its own image. I guess in Phaser it's used to support some animations.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660307892150/mZ-cuYKv9.png\" alt=\"player sprite\" /></p>\n<p>In this case, it's the different states the character can have.</p>\n<p>The <code>create</code> function is run when the scene is created and here we will add the loaded images to the screen. The syntax is <code>this.add.image(x, y, alias)</code> where x,y are the coordinates where the center of this image should be. So to add an image that will cover the whole 800x600 scene we need an image in this size and put it on <code>400, 300</code></p>\n<p>Images will be added in the order they're called. If add <code>star</code> before <code>sky</code>, the sky will cover the star.</p>\n<p>I tried moving one of the <code>this.add.image</code> calls into <code>preload</code>. It just fails silently, but you can see on the screen something:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1660307814817/HJURYg6c3.png\" alt=\"failed loading image\" /></p>\n<p>Reading through part 3 of the tutorial, we encounter a few words we need to understand:</p>\n<ul>\n<li>Scene</li>\n<li>Game object</li>\n<li>Camera</li>\n</ul>\n<p>I'm leaving these for later until we understand them fully to try to define them. We also have a list of questions to answer from [[02 starting with phaser]]</p>\n<p>ok, I encountered my first problem - <code>platforms = this.physics.add.staticGroup()</code> throws an error about <code>this.physics</code> undefined. Let's see what we missed...</p>\n<p>It seems like I didn't miss anything until now, at the next paragraph we add a physics definition to our config:</p>\n<pre><code class=\"lang-js\">physics: {\n    <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">'arcade'</span>,\n    <span class=\"hljs-attr\">arcade</span>: {\n        <span class=\"hljs-attr\">gravity</span>: { <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">300</span> },\n        <span class=\"hljs-attr\">debug</span>: <span class=\"hljs-literal\">false</span>\n    }\n},\n</code></pre>\n<p>The next part of the tutorial talks about physics.</p>\n<p>I actually stopped here and had a day or two of rest, and I figured out a few things about my learning process and this blog. or I realized a few things that I want to check.</p>\n<p>I realized that going through the tutorial step by step isn't that interesting, for me or for anyone who's going to read this blog (hey future me...), instead I use this blog to document my learning path, how I overcame different bumps in the path, what directions I chose, things that reading this blog in 6 months, I can say, \"wow, so much progress\", or not, maybe something like \"I could take this path instead\".</p>\n<p>Anyway, since it's my first tutorial, I will continue writing about it, and we'll see what posts I have in the future.</p>\n<p>A physics system means a framework that simulates different physics rules and definitions, like velocity (speed), and space. Phaser comes with 3 different built-ins:</p>\n<ul>\n<li>Arcade</li>\n<li>Impact Physics</li>\n<li>Matter.js Physics</li>\n</ul>\n<p>The differences between them are not so clear to me, even after googling <a target=\"_blank\" href=\"https://www.google.com/search?q=phaser+arcade+physics+vs+matter&amp;oq=phaser+arcade+physics+vs+matter&amp;aqs=chrome..69i57j33i160l3.10177j0j4&amp;sourceid=chrome&amp;ie=UTF-8\">phaser arcade physics vs matter</a> . Arcade seems like the default and the simplest, although some on <a target=\"_blank\" href=\"https://www.html5gamedevs.com/topic/37762-physics-arcade-vs-impact-vs-matter/\">this article</a> are saying it's quite capable. Sounds like Matter.js is a full engine and very complex, so while I can do stuff that I can't do with arcade, it will be hard to do it. Impact requires windows(?) to run.</p>\n<p>For now, we stay with \"arcade\".</p>\n<p>A physics sprite (an element created with <code>this.physics.add</code>) has a body property that matches the actual body in our scene and has different properties like <code>gravity</code> (I imagine mass when reading the explanation), and probably more stuff.</p>\n<p>Game objects are objects that are drawn on the scene. They can be moved, collide with each other, and react to events.</p>\n<p>A collider is an object that manages collisions between game objects. to create one we call <code>this.physics.add.collider(object1, object2)</code> when each object can be a list of objects too.</p>\n<p>Part 7 of the tutorial goes through controlling the player. For that, we have the <code>update</code> event, which runs on every new frame. here we can check which key (or set of keys) is clicked and respond to them.</p>\n<p>Now I can actually move around and jump between platforms!!! I wonder how to make it controlled with touch, so I can control it on my mobile phone.</p>\n<p>Part 8 will add stars to the game and allow the user to collect them. Now need to add some way to track these.</p>\n<p>That's actually the next part where we add text to show the score. I also show \"Done\" when all the stars are collected. Maybe I can also add sound?</p>\n<p>Last part - adding an enemy. They add a pretty interesting idea, where instead of stopping the game after the collection of all the stars, more stars will appear, but with them a small bomb, that will jump randomly across the scene and if the player touches it, it's game over. every time all the stars are collected, it will add another bomb. So the challenge of the game is to collect stars with more and more bombs appearing.</p>\n<p>Ok, I think I have enough to start the pong project. Somethings I want to add, but I can also add to my pong game:</p>\n<ol>\n<li>support for mobile.</li>\n<li>sounds</li>\n<li>effects</li>\n<li>using a nice structured project instead of having global variables, etc.</li>\n</ol>\n","contentMarkdown":"In this article I follow https://phaser.io/tutorials/making-your-first-phaser-3-game, developing a small platform game. A platform game is a game where the user jumps between platforms, collects stuff, and avoids/fights enemies.\n\nIn my first post I called phaser a \"game engine\", and here they describe it as a \"game framework\". That might be the same, I'll need to research it. Phaser helps us develop games specifically for the browser using a JavaScript API.\n\nI copied the folder I made for my previous article [[02 starting with phaser]] and extracted the zip file from the tutorial into a `solutions` folder. I prefer to write the code myself instead of copy-pasting or just having it present. So I use the zip file for the assets in case something doesn't work.\n\n`part1.html` file has the basic structure as we talked about in the last post, along with an `update` function, so let's just move its content into `index.html`. I do copy-paste this time because we already went over this code.\n\nIt's fun to read and see that some of my guesses were right.\n\nGoing into part 2 I see that as I guessed the preload event is when you load your assets and name them. We load 4 images (`this.load.image(alias, url)`) and we also load a sprite sheet. If sprites are the same as in web dev, we don't use them often these days, but in the past, they have been used the make loading faster, so you load the same image once, and just show part of the sprite. It's a big image, separated into frames, where each frame is its own image. I guess in Phaser it's used to support some animations.\n\n\n![player sprite](https://cdn.hashnode.com/res/hashnode/image/upload/v1660307892150/mZ-cuYKv9.png align=\"left\")\n\nIn this case, it's the different states the character can have.\n\nThe `create` function is run when the scene is created and here we will add the loaded images to the screen. The syntax is `this.add.image(x, y, alias)` where x,y are the coordinates where the center of this image should be. So to add an image that will cover the whole 800x600 scene we need an image in this size and put it on `400, 300`\n\nImages will be added in the order they're called. If add `star` before `sky`, the sky will cover the star.\n\nI tried moving one of the `this.add.image` calls into `preload`. It just fails silently, but you can see on the screen something:\n\n\n![failed loading image](https://cdn.hashnode.com/res/hashnode/image/upload/v1660307814817/HJURYg6c3.png align=\"left\")\n\n\nReading through part 3 of the tutorial, we encounter a few words we need to understand:\n\n- Scene\n- Game object\n- Camera\n\nI'm leaving these for later until we understand them fully to try to define them. We also have a list of questions to answer from [[02 starting with phaser]]\n\nok, I encountered my first problem - ` platforms = this.physics.add.staticGroup()` throws an error about `this.physics` undefined. Let's see what we missed...\n\nIt seems like I didn't miss anything until now, at the next paragraph we add a physics definition to our config:\n\n```js\nphysics: {\n\tdefault: 'arcade',\n\tarcade: {\n\t\tgravity: { y: 300 },\n\t\tdebug: false\n\t}\n},\n```\n\nThe next part of the tutorial talks about physics.\n\nI actually stopped here and had a day or two of rest, and I figured out a few things about my learning process and this blog. or I realized a few things that I want to check.\n\nI realized that going through the tutorial step by step isn't that interesting, for me or for anyone who's going to read this blog (hey future me...), instead I use this blog to document my learning path, how I overcame different bumps in the path, what directions I chose, things that reading this blog in 6 months, I can say, \"wow, so much progress\", or not, maybe something like \"I could take this path instead\".\n\nAnyway, since it's my first tutorial, I will continue writing about it, and we'll see what posts I have in the future.\n\nA physics system means a framework that simulates different physics rules and definitions, like velocity (speed), and space. Phaser comes with 3 different built-ins:\n\n- Arcade\n- Impact Physics\n- Matter.js Physics\n\nThe differences between them are not so clear to me, even after googling [phaser arcade physics vs matter](https://www.google.com/search?q=phaser+arcade+physics+vs+matter&oq=phaser+arcade+physics+vs+matter&aqs=chrome..69i57j33i160l3.10177j0j4&sourceid=chrome&ie=UTF-8) . Arcade seems like the default and the simplest, although some on [this article](https://www.html5gamedevs.com/topic/37762-physics-arcade-vs-impact-vs-matter/) are saying it's quite capable. Sounds like Matter.js is a full engine and very complex, so while I can do stuff that I can't do with arcade, it will be hard to do it. Impact requires windows(?) to run.\n\nFor now, we stay with \"arcade\".\n\nA physics sprite (an element created with `this.physics.add`) has a body property that matches the actual body in our scene and has different properties like `gravity` (I imagine mass when reading the explanation), and probably more stuff.\n\nGame objects are objects that are drawn on the scene. They can be moved, collide with each other, and react to events.\n\nA collider is an object that manages collisions between game objects. to create one we call `this.physics.add.collider(object1, object2)` when each object can be a list of objects too.\n\nPart 7 of the tutorial goes through controlling the player. For that, we have the `update` event, which runs on every new frame. here we can check which key (or set of keys) is clicked and respond to them.\n\nNow I can actually move around and jump between platforms!!! I wonder how to make it controlled with touch, so I can control it on my mobile phone.\n\nPart 8 will add stars to the game and allow the user to collect them. Now need to add some way to track these.\n\nThat's actually the next part where we add text to show the score. I also show \"Done\" when all the stars are collected. Maybe I can also add sound?\n\nLast part - adding an enemy. They add a pretty interesting idea, where instead of stopping the game after the collection of all the stars, more stars will appear, but with them a small bomb, that will jump randomly across the scene and if the player touches it, it's game over. every time all the stars are collected, it will add another bomb. So the challenge of the game is to collect stars with more and more bombs appearing.\n\nOk, I think I have enough to start the pong project. Somethings I want to add, but I can also add to my pong game:\n\n1. support for mobile.\n2. sounds\n3. effects\n4. using a nice structured project instead of having global variables, etc.\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b953f2","56744722958ef13879b9514e"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5584.3722,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":false,"enableToc":false,"toc":[],"numUniqueUsersWhoReacted":0,"title":"My First Game...","subtitle":"","pollOptions":[],"type":"story","coverImageAttribution":"https://unsplash.com/@claudiolcastro","coverImagePhotographer":"Cl√°udio Luiz Castro","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"","metaDescription":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"62effcb6dfc2b15565884099","slug":"my-first-game","importedFromMedium":false,"dateAdded":"2022-08-12T12:39:10.312Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl6qghhsi05aogenv9yqld0kx","author":"56b2ebc410979efc2b9a910e","followersCount":1,"draft":"62f3d1462e865683123dd12d","readTime":5,"__v":0,"viewsUpdatedOn":1711969246417,"series":null,"dateUpdated":"2022-08-16T12:25:21.932Z","pendingPublicationApproval":false,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"62f649eefffdab933bde466f"},{"reward":{"type":"xlm"},"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"_id":"62f1eb38c1e76d621b3f91f5","sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":59,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/unsplash/By-tZImt0Ms/upload/v1659898720683/zpe2isKwu.jpeg","autoGeneratedCover":"","brief":"This is the second part of my series about starting with game-dev. The first part is https://chiptus.hashnode.dev/my-path-into-game-dev\nI'm following the getting started tutorial of Phaser\nThe first step is to set up a new web project, create a folde...","content":"<p>This is the second part of my series about starting with game-dev. The first part is https://chiptus.hashnode.dev/my-path-into-game-dev</p>\n<p>I'm following the <a target=\"_blank\" href=\"https://phaser.io/tutorials/getting-started-phaser3\">getting started tutorial</a> of Phaser</p>\n<p>The first step is to set up a new web project, create a folder, initialize a yarn project (or npm if you prefer that), and install <code>http-server</code> to run your web project. Probably in a more advanced project, I would use something like webpack or vite, but for now <code>http-server</code> should be enough.</p>\n<pre><code class=\"lang-sh\">mkdir first-project\n<span class=\"hljs-built_in\">cd</span> first-project\ngit init\nyarn init -y\nyarn add -D http-server\ngit add .\ngit commit -m <span class=\"hljs-string\">\"init\"</span>\n</code></pre>\n<h2 id=\"heading-installing-phaser\">Installing phaser</h2>\n<p>I decided to install the 3.6 beta version, so I use the most updated version. I probably won't use any of the new features and might see some bugs on the way, but I like being on the bleeding edge (although this approach has many problems)</p>\n<pre><code class=\"lang-sh\">yarn add phaser@3.60.0-beta.9\n</code></pre>\n<p>I also added the following to my package.json so I can run <code>yarn start</code> to get my server started:</p>\n<pre><code class=\"lang-json\"><span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-attr\">\"start\"</span>: <span class=\"hljs-string\">\"http-server\"</span>\n}\n</code></pre>\n<p>The tutorial has a sample html file, I copy-pasted it into <code>index.html</code> and ran <code>yarn start</code>, and opened the browser to <code>localhost:8080</code>, and now I got the following:</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1659898815539/PSCIhdjny.png\" alt=\"image.png\" /></p>\n<p>the html file actually contains only a script tag, let's try to understand it:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> config = {\n    <span class=\"hljs-attr\">type</span>: Phaser.AUTO,\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">800</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span>,\n    <span class=\"hljs-attr\">physics</span>: {\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">\"arcade\"</span>,\n      <span class=\"hljs-attr\">arcade</span>: {\n        <span class=\"hljs-attr\">gravity</span>: { <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">200</span> },\n      },\n    },\n    <span class=\"hljs-attr\">scene</span>: {\n      <span class=\"hljs-attr\">preload</span>: preload,\n      <span class=\"hljs-attr\">create</span>: create,\n    },\n};\n\n<span class=\"hljs-keyword\">var</span> game = <span class=\"hljs-keyword\">new</span> Phaser.Game(config);\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preload</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.load.setBaseURL(<span class=\"hljs-string\">\"http://labs.phaser.io\"</span>);\n\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"sky\"</span>, <span class=\"hljs-string\">\"assets/skies/space3.png\"</span>);\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"logo\"</span>, <span class=\"hljs-string\">\"assets/sprites/phaser3-logo.png\"</span>);\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"assets/particles/red.png\"</span>);\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"sky\"</span>);\n\n    <span class=\"hljs-keyword\">var</span> particles = <span class=\"hljs-built_in\">this</span>.add.particles(<span class=\"hljs-string\">\"red\"</span>);\n\n    <span class=\"hljs-keyword\">var</span> emitter = particles.createEmitter({\n      <span class=\"hljs-attr\">speed</span>: <span class=\"hljs-number\">100</span>,\n      <span class=\"hljs-attr\">scale</span>: { <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">0</span> },\n      <span class=\"hljs-attr\">blendMode</span>: <span class=\"hljs-string\">\"ADD\"</span>,\n    });\n\n    <span class=\"hljs-keyword\">var</span> logo = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">\"logo\"</span>);\n\n    logo.setVelocity(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>);\n    logo.setBounce(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n    logo.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n\n    emitter.startFollow(logo);\n}\n</code></pre>\n<p>The first object is a config object for Phaser:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> config = {\n    <span class=\"hljs-attr\">type</span>: Phaser.AUTO,\n    <span class=\"hljs-attr\">width</span>: <span class=\"hljs-number\">800</span>,\n    <span class=\"hljs-attr\">height</span>: <span class=\"hljs-number\">600</span>,\n    <span class=\"hljs-attr\">physics</span>: {\n      <span class=\"hljs-attr\">default</span>: <span class=\"hljs-string\">\"arcade\"</span>,\n      <span class=\"hljs-attr\">arcade</span>: {\n        <span class=\"hljs-attr\">gravity</span>: { <span class=\"hljs-attr\">y</span>: <span class=\"hljs-number\">200</span> },\n      },\n    },\n    <span class=\"hljs-attr\">scene</span>: {\n      <span class=\"hljs-attr\">preload</span>: preload,\n      <span class=\"hljs-attr\">create</span>: create,\n    },\n};\n</code></pre>\n<p>I'm guessing, that it config a new game, with a size of 800x600, a physics engine of an arcade game with a certain constant for gravity, and it tells the scene to run <code>preload</code> on preload and <code>create</code> on create.</p>\n<p>I know this sentence doesn't say much, but I guess I'll learn soon the following:</p>\n<ul>\n<li>What is a physics engine?</li>\n<li>What is an engine for an arcade game?</li>\n<li>What is the gravity constant?</li>\n<li>What is a scene? I guess it's something like a game level?</li>\n<li>What are the preload and create events for a scene? Which other events does a scene have?</li>\n</ul>\n<p>The next line will create the game object:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> game = <span class=\"hljs-keyword\">new</span> Phaser.Game(config);\n</code></pre>\n<p>The preload event probably runs before (i.e pre) loading:</p>\n<pre><code class=\"lang-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">preload</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.load.setBaseURL(<span class=\"hljs-string\">\"http://labs.phaser.io\"</span>);\n\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"sky\"</span>, <span class=\"hljs-string\">\"assets/skies/space3.png\"</span>);\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"logo\"</span>, <span class=\"hljs-string\">\"assets/sprites/phaser3-logo.png\"</span>);\n    <span class=\"hljs-built_in\">this</span>.load.image(<span class=\"hljs-string\">\"red\"</span>, <span class=\"hljs-string\">\"assets/particles/red.png\"</span>);\n}\n</code></pre>\n<p>in this event, we load the assets that we need for this game and name them. Phaser has a list of assets that we can load examples from.</p>\n<pre><code class=\"lang-js\">\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">create</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">this</span>.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">300</span>, <span class=\"hljs-string\">\"sky\"</span>);\n\n    <span class=\"hljs-keyword\">var</span> particles = <span class=\"hljs-built_in\">this</span>.add.particles(<span class=\"hljs-string\">\"red\"</span>);\n\n    <span class=\"hljs-keyword\">var</span> emitter = particles.createEmitter({\n      <span class=\"hljs-attr\">speed</span>: <span class=\"hljs-number\">100</span>,\n      <span class=\"hljs-attr\">scale</span>: { <span class=\"hljs-attr\">start</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">end</span>: <span class=\"hljs-number\">0</span> },\n      <span class=\"hljs-attr\">blendMode</span>: <span class=\"hljs-string\">\"ADD\"</span>,\n    });\n\n    <span class=\"hljs-keyword\">var</span> logo = <span class=\"hljs-built_in\">this</span>.physics.add.image(<span class=\"hljs-number\">400</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">\"logo\"</span>);\n\n    logo.setVelocity(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">200</span>);\n    logo.setBounce(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>);\n    logo.setCollideWorldBounds(<span class=\"hljs-literal\">true</span>);\n\n    emitter.startFollow(logo);\n}\n</code></pre>\n<p>Now the <code>create</code> event is a bit less clear for me. Maybe it's the first event, that runs when the scene is created?</p>\n<ol>\n<li>We add the <a target=\"_blank\" href=\"https://labs.phaser.io/assets/skies/space3.png\">sky</a> image, probably as our background.</li>\n<li>then add red particles: ![[Screenshot_20220807_214331.png]]\nhttps://labs.phaser.io/assets/particles/red.png</li>\n<li>now we create something called an emitter, not sure what it is.</li>\n<li>add the phaser logo, and add some physics to it, so it will move</li>\n<li>make our emitter follow the logo.</li>\n<li>This creates the final example</li>\n</ol>\n<p>We can play around (and I encourage you to do that) with the parameters, hide code, and see what happens.</p>\n<p>For example, commenting <code>emitter.startFollow</code> will leave the particles at the top left corner of the screen. And hiding the logo settings will just make it fall out of the screen.</p>\n<p>Playing with <code>setVelocity</code> it seems like this function takes <code>x,y</code> parameters and they control the speed on the x axis or y axis. Playing with it a bit more, I see that I'm wrong.</p>\n<p>That's a good start, and I feel close to understanding what I need for Pong. Although I can start reading the docs, I will go with another tutorial - https://phaser.io/tutorials/making-your-first-phaser-3-game</p>\n","contentMarkdown":"This is the second part of my series about starting with game-dev. The first part is https://chiptus.hashnode.dev/my-path-into-game-dev\n\nI'm following the [getting started tutorial](https://phaser.io/tutorials/getting-started-phaser3) of Phaser\n\nThe first step is to set up a new web project, create a folder, initialize a yarn project (or npm if you prefer that), and install `http-server` to run your web project. Probably in a more advanced project, I would use something like webpack or vite, but for now `http-server` should be enough.\n\n```sh\nmkdir first-project\ncd first-project\ngit init\nyarn init -y\nyarn add -D http-server\ngit add .\ngit commit -m \"init\"\n```\n\n## Installing phaser\nI decided to install the 3.6 beta version, so I use the most updated version. I probably won't use any of the new features and might see some bugs on the way, but I like being on the bleeding edge (although this approach has many problems)\n\n```sh\nyarn add phaser@3.60.0-beta.9\n```\n\nI also added the following to my package.json so I can run `yarn start` to get my server started:\n\n```json\n\"scripts\": {\n\t\"start\": \"http-server\"\n}\n```\n\nThe tutorial has a sample html file, I copy-pasted it into `index.html` and ran `yarn start`, and opened the browser to `localhost:8080`, and now I got the following:\n\n\n![image.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1659898815539/PSCIhdjny.png align=\"left\")\n\nthe html file actually contains only a script tag, let's try to understand it:\n```js\nvar config = {\n\ttype: Phaser.AUTO,\n\twidth: 800,\n\theight: 600,\n\tphysics: {\n\t  default: \"arcade\",\n\t  arcade: {\n\t\tgravity: { y: 200 },\n\t  },\n\t},\n\tscene: {\n\t  preload: preload,\n\t  create: create,\n\t},\n};\n\nvar game = new Phaser.Game(config);\n\nfunction preload() {\n\tthis.load.setBaseURL(\"http://labs.phaser.io\");\n\n\tthis.load.image(\"sky\", \"assets/skies/space3.png\");\n\tthis.load.image(\"logo\", \"assets/sprites/phaser3-logo.png\");\n\tthis.load.image(\"red\", \"assets/particles/red.png\");\n}\n\nfunction create() {\n\tthis.add.image(400, 300, \"sky\");\n\n\tvar particles = this.add.particles(\"red\");\n\n\tvar emitter = particles.createEmitter({\n\t  speed: 100,\n\t  scale: { start: 1, end: 0 },\n\t  blendMode: \"ADD\",\n\t});\n\n\tvar logo = this.physics.add.image(400, 100, \"logo\");\n\n\tlogo.setVelocity(100, 200);\n\tlogo.setBounce(1, 1);\n\tlogo.setCollideWorldBounds(true);\n\n\temitter.startFollow(logo);\n}\n```\n\nThe first object is a config object for Phaser:\n\n```js\nvar config = {\n\ttype: Phaser.AUTO,\n\twidth: 800,\n\theight: 600,\n\tphysics: {\n\t  default: \"arcade\",\n\t  arcade: {\n\t\tgravity: { y: 200 },\n\t  },\n\t},\n\tscene: {\n\t  preload: preload,\n\t  create: create,\n\t},\n};\n```\n\nI'm guessing, that it config a new game, with a size of 800x600, a physics engine of an arcade game with a certain constant for gravity, and it tells the scene to run `preload` on preload and `create` on create.\n\nI know this sentence doesn't say much, but I guess I'll learn soon the following:\n- What is a physics engine?\n- What is an engine for an arcade game?\n- What is the gravity constant?\n- What is a scene? I guess it's something like a game level?\n- What are the preload and create events for a scene? Which other events does a scene have?\n\nThe next line will create the game object:\n```js\nvar game = new Phaser.Game(config);\n```\n\nThe preload event probably runs before (i.e pre) loading:\n\n```js\nfunction preload() {\n\tthis.load.setBaseURL(\"http://labs.phaser.io\");\n\n\tthis.load.image(\"sky\", \"assets/skies/space3.png\");\n\tthis.load.image(\"logo\", \"assets/sprites/phaser3-logo.png\");\n\tthis.load.image(\"red\", \"assets/particles/red.png\");\n}\n```\n\nin this event, we load the assets that we need for this game and name them. Phaser has a list of assets that we can load examples from.\n\n```js\n\nfunction create() {\n\tthis.add.image(400, 300, \"sky\");\n\n\tvar particles = this.add.particles(\"red\");\n\n\tvar emitter = particles.createEmitter({\n\t  speed: 100,\n\t  scale: { start: 1, end: 0 },\n\t  blendMode: \"ADD\",\n\t});\n\n\tvar logo = this.physics.add.image(400, 100, \"logo\");\n\n\tlogo.setVelocity(100, 200);\n\tlogo.setBounce(1, 1);\n\tlogo.setCollideWorldBounds(true);\n\n\temitter.startFollow(logo);\n}\n```\n\nNow the `create` event is a bit less clear for me. Maybe it's the first event, that runs when the scene is created?\n\n1. We add the [sky](https://labs.phaser.io/assets/skies/space3.png) image, probably as our background.\n2. then add red particles: ![[Screenshot_20220807_214331.png]]\n   https://labs.phaser.io/assets/particles/red.png\n3. now we create something called an emitter, not sure what it is.\n4. add the phaser logo, and add some physics to it, so it will move\n5. make our emitter follow the logo.\n6. This creates the final example\n\n\nWe can play around (and I encourage you to do that) with the parameters, hide code, and see what happens.\n\nFor example, commenting `emitter.startFollow` will leave the particles at the top left corner of the screen. And hiding the logo settings will just make it fall out of the screen.\n\nPlaying with `setVelocity` it seems like this function takes `x,y` parameters and they control the speed on the x axis or y axis. Playing with it a bit more, I see that I'm wrong.\n\n\nThat's a good start, and I feel close to understanding what I need for Pong. Although I can start reading the docs, I will go with another tutorial - https://phaser.io/tutorials/making-your-first-phaser-3-game\n\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b953f2","56744722958ef13879b9514e"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5578.008,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":false,"enableToc":false,"toc":[],"numUniqueUsersWhoReacted":0,"title":"Starting with Phaser","subtitle":"","type":"story","ogImage":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"62effcb6dfc2b15565884099","slug":"starting-with-phaser","importedFromMedium":false,"dateAdded":"2022-08-09T05:06:00.922Z","hasCustomDate":false,"series":null,"coverImageAttribution":"https://unsplash.com/@sigmund","coverImagePhotographer":"Sigmund","isCoverAttributionHidden":false,"metaTitle":"","metaDescription":"","hasScheduledDate":true,"stickCoverToBottom":false,"pollOptions":[],"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl6lpz64r0348r2nvc11s8a83","author":"56b2ebc410979efc2b9a910e","followersCount":1,"draft":"62f00abfdfc2b1556588429c","readTime":4,"__v":0,"viewsUpdatedOn":1714010439503,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"62f1eb38c1e76d621b3f91f5"},{"reward":{"type":"xlm"},"coAuthors":[],"discussionScore":0,"totalReactionsByCurrentUser":0,"_id":"62effe4ee3a3793580e03b14","sourcedFromGithub":false,"githubAsSourceMeta":null,"isAnonymous":false,"views":28,"slugOverridden":false,"coverImage":"https://cdn.hashnode.com/res/hashnode/image/unsplash/eCktzGjC-iU/upload/v1659895306036/CmjrWbqdF.jpeg","autoGeneratedCover":"","brief":"Recently I decided I want to pursue my dream of game development. It's not an easy decision, and it will take me back in my career. But it is a dream, and I will try to do it.\nI started by searching \"web dev to game dev site:www.reddit.com\"\nI limited...","content":"<p>Recently I decided I want to pursue my dream of game development. It's not an easy decision, and it will take me back in my career. But it is a dream, and I will try to do it.</p>\n<p>I started by searching<a target=\"_blank\" href=\"https://www.google.com/search?q=web+dev+to+game+dev+site%3Awww.reddit.com&amp;oq=web+dev+to+game+dev+site%3Awww.reddit.com&amp;aqs=chrome..69i57j69i64l3.8694j0j7&amp;sourceid=chrome&amp;ie=UTF-8\"> \"web dev to game dev site:www.reddit.com\"</a>\nI limited the search to Reddit, because I usually get good results from there, instead of click-bait blog posts that have no info.</p>\n<p>Most of the posts were about a web developer who's interested in that direction, and many replies say he shouldn't. The pay is bad, it's very hard, etc. As with any dream, I want to fail myself, and I won't let anyone prevent me from trying.</p>\n<p>So I went into <a target=\"_blank\" href=\"gamedev.reddit.com\">gamedev.reddit.com</a> to find a tutorial and found their <a target=\"_blank\" href=\"https://old.reddit.com/r/gamedev/wiki/faq\">faq</a>. They had some questions about where to start if I'm a total beginner, and if I know how to code. I went into some of the \"Paths to gamedev\" they suggested, and what I saw is that they suggest creating something small. At the beginning of the search, I knew I need to choose a project, and I thought of porting <a target=\"_blank\" href=\"https://archive.org/details/Blip_and_Blop_-_Balls_of_Steel\">blip 'n blop</a> but after reading some of the posts, I realized I should start with something that is very simple, <a target=\"_blank\" href=\"https://web.archive.org/web/20051104034215/www.lupinegames.com/articles/path_to_dev.html\">one</a> suggested Tetris and <a target=\"_blank\" href=\"https://gamedev.stackexchange.com/a/890/138296\">another</a> suggested pong. What they emphasized is to choose a game that is too easy, that I look at and think, \"I should start with something harder, it won't teach me anything\". The logic behind this is that I will learn the basics, like what is a game object, how to deploy a game...</p>\n<p>So I chose pong. It's very easy, to play and build (at least, it looks so). </p>\n<p>Here's a list of projects I thought about or saw online:</p>\n<ul>\n<li>Pong</li>\n<li>Tetris</li>\n<li>Soduko</li>\n<li>breakout (or superball as my father used to play when I was young)</li>\n</ul>\n<p>My plan now is to start with pong, and continue with this list.</p>\n<p>Now, I need to choose a game engine. of course, these games don't need them too much, but it would be nice to play a little with what's online.</p>\n<p>Since I'm a web developer, I'll try to work with something that uses JavaScript, this way I can also put those online easily. In the future, I will probably consider something else, depending on my needs (I'm looking forward to Unity/Unreal/Godot)</p>\n<h2 id=\"heading-choosing-a-game-engine\">Choosing a game engine</h2>\n<p>To start, I searched google for <a target=\"_blank\" href=\"https://www.google.com/search?q=web+game+engine&amp;oq=web+game+engine&amp;aqs=chrome..69i57j0i512l2j0i22i30l7.2890j0j4&amp;sourceid=chrome&amp;ie=UTF-8\">\"web game engine\"</a> , the two first results were to actual game engines (<a target=\"_blank\" href=\"https://phaser.io/\">Phaser</a>, <a target=\"_blank\" href=\"https://playcanvas.com/\">PlayCanvas</a>), and the second 2 results were a list of game engines.</p>\n<ul>\n<li>https://html5gameengine.com/ is a nice list, but not updated (phaser says its last update is 2018), so I didn't read too much into its suggestions</li>\n<li>https://github.com/collections/javascript-game-engines - is nice, but there's no way to compare the projects.</li>\n</ul>\n<p>I heard the name Phaser a lot in the last couple of days, and in other contexts, so I decided to go with it. Yes, there might be better, but I didn't want to go into <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Analysis_paralysis\">analysis paralysis</a> so I decided to take it, and after 2-3 games, I can try something else.</p>\n<h2 id=\"heading-starting-the-journey\">Starting the journey</h2>\n<p>What should I do? Maybe, start one of the tutorials on the phaser home page? Jump into creating Pong and reading the documentation? Look for a tutorial for building pong with Phaser?</p>\n<p>I think I'll start how I usually do, start with a tutorial, until I have an idea of how to do stuff with Phaser, and then jump into Pong.</p>\n","contentMarkdown":"Recently I decided I want to pursue my dream of game development. It's not an easy decision, and it will take me back in my career. But it is a dream, and I will try to do it.\n\nI started by searching[ \"web dev to game dev site:www.reddit.com\"](https://www.google.com/search?q=web+dev+to+game+dev+site%3Awww.reddit.com&oq=web+dev+to+game+dev+site%3Awww.reddit.com&aqs=chrome..69i57j69i64l3.8694j0j7&sourceid=chrome&ie=UTF-8)\nI limited the search to Reddit, because I usually get good results from there, instead of click-bait blog posts that have no info.\n\nMost of the posts were about a web developer who's interested in that direction, and many replies say he shouldn't. The pay is bad, it's very hard, etc. As with any dream, I want to fail myself, and I won't let anyone prevent me from trying.\n\n\nSo I went into [gamedev.reddit.com](gamedev.reddit.com) to find a tutorial and found their [faq](https://old.reddit.com/r/gamedev/wiki/faq). They had some questions about where to start if I'm a total beginner, and if I know how to code. I went into some of the \"Paths to gamedev\" they suggested, and what I saw is that they suggest creating something small. At the beginning of the search, I knew I need to choose a project, and I thought of porting [blip 'n blop](https://archive.org/details/Blip_and_Blop_-_Balls_of_Steel) but after reading some of the posts, I realized I should start with something that is very simple, [one](https://web.archive.org/web/20051104034215/www.lupinegames.com/articles/path_to_dev.html) suggested Tetris and [another](https://gamedev.stackexchange.com/a/890/138296) suggested pong. What they emphasized is to choose a game that is too easy, that I look at and think, \"I should start with something harder, it won't teach me anything\". The logic behind this is that I will learn the basics, like what is a game object, how to deploy a game...\n\nSo I chose pong. It's very easy, to play and build (at least, it looks so). \n\nHere's a list of projects I thought about or saw online:\n- Pong\n- Tetris\n- Soduko\n- breakout (or superball as my father used to play when I was young)\n\nMy plan now is to start with pong, and continue with this list.\n\nNow, I need to choose a game engine. of course, these games don't need them too much, but it would be nice to play a little with what's online.\n\nSince I'm a web developer, I'll try to work with something that uses JavaScript, this way I can also put those online easily. In the future, I will probably consider something else, depending on my needs (I'm looking forward to Unity/Unreal/Godot)\n\n## Choosing a game engine\n\nTo start, I searched google for [\"web game engine\"](https://www.google.com/search?q=web+game+engine&oq=web+game+engine&aqs=chrome..69i57j0i512l2j0i22i30l7.2890j0j4&sourceid=chrome&ie=UTF-8) , the two first results were to actual game engines ([Phaser](https://phaser.io/), [PlayCanvas](https://playcanvas.com/)), and the second 2 results were a list of game engines.\n- https://html5gameengine.com/ is a nice list, but not updated (phaser says its last update is 2018), so I didn't read too much into its suggestions\n- https://github.com/collections/javascript-game-engines - is nice, but there's no way to compare the projects.\n\nI heard the name Phaser a lot in the last couple of days, and in other contexts, so I decided to go with it. Yes, there might be better, but I didn't want to go into [analysis paralysis](https://en.wikipedia.org/wiki/Analysis_paralysis) so I decided to take it, and after 2-3 games, I can try something else.\n\n\n## Starting the journey\nWhat should I do? Maybe, start one of the tutorials on the phaser home page? Jump into creating Pong and reading the documentation? Look for a tutorial for building pong with Phaser?\n\nI think I'll start how I usually do, start with a tutorial, until I have an idea of how to do stuff with Phaser, and then jump into Pong.\n","hasPolls":false,"totalPollVotes":0,"upvotes":0,"downvotes":0,"tags":["56744723958ef13879b953f2","56744722958ef13879b94f1b"],"untaggedFrom":[],"upvotedBy":[],"downvotedBy":[],"popularity":5575.2039,"responses":[],"responseCount":0,"replyCount":0,"followers":[],"isActive":true,"isFeatured":false,"isEngaging":false,"answeredByTarget":false,"inviters":[],"isDelisted":false,"isNotified":false,"duplicatePosts":[],"numCollapsed":0,"hasReward":false,"bookmarkedIn":[],"similarPostIds":[],"reactions":[],"totalReactions":0,"reactionsByCurrentUser":[],"isPinnedToBlog":false,"disableComments":false,"commentsPaused":false,"hasLatex":false,"syncAlgolia":false,"enableToc":false,"toc":[],"numUniqueUsersWhoReacted":0,"title":"My Path into game-dev","subtitle":"","pollOptions":[],"type":"story","coverImageAttribution":"https://unsplash.com/@jeshoots","coverImagePhotographer":"JESHOOTS.COM","isCoverAttributionHidden":false,"ogImage":"","metaTitle":"","metaDescription":"","isRepublished":false,"originalArticleURL":"","partOfPublication":true,"publication":"62effcb6dfc2b15565884099","slug":"my-path-into-game-dev","importedFromMedium":false,"dateAdded":"2022-08-07T18:02:54.867Z","hasCustomDate":false,"hasScheduledDate":false,"stickCoverToBottom":false,"badges":[],"questionReplies":[],"contributors":[],"cuid":"cl6jmuk9o0c5axvnv9vhmgng0","author":"56b2ebc410979efc2b9a910e","followersCount":1,"draft":"62effd2fdfc2b155658840a9","readTime":3,"__v":0,"viewsUpdatedOn":1710646227562,"uniqueReactions":[],"reactionToCountMapUnique":{"any":1},"id":"62effe4ee3a3793580e03b14"}]}